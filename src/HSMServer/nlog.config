<?xml version="1.0" encoding="utf-8" ?>
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      autoReload="true"
      internalLogLevel="Info"
      internalLogFile="c:\temp\internal-nlog.txt">

  <!-- enable asp.net core layout renderers -->
  <extensions>
    <add assembly="NLog.Web.AspNetCore"/>
  </extensions>

  <!-- the targets to write to -->
  <targets async="true">
    <!-- write logs to file  -->
    <target xsi:type="File"
            name="errorfile"
            fileName="Logs/HSM-error-log-${shortdate}.txt"
            layout="${longdate}|${event-properties:item=EventId_Id}|${uppercase:${level}}|${logger}| ${message} ${exception:format=tostring}|"
            archiveFileName="Logs/Archives/HSM-error-log-{#}.zip"
            maxArchiveFiles="30"
            archiveNumbering="Date"
            archiveEvery="Day"
            archiveDateFormat="yyyy-MM-dd"
            enableArchiveFileCompression="true"
            archiveOldFileOnStartup="true"/>

    <!-- another file log, only own logs. Uses some ASP.NET core renderers -->
    <target xsi:type="File"
            name="allfile" 
            fileName="Logs/HSM-all-log-${shortdate}.txt"
            layout="${longdate}|${event-properties:item=EventId_Id}|${uppercase:${level}}|${logger}| ${message} ${exception:format=tostring}|url: ${aspnet-request-url}|action: ${aspnet-mvc-action}" 
            archiveFileName="Logs/Archives/HSM-all-log-{#}.zip"
            maxArchiveFiles="30"
            archiveNumbering="Date"
            archiveEvery="Day"
            archiveDateFormat="yyyy-MM-dd"
            enableArchiveFileCompression="true"
            archiveOldFileOnStartup="true"/>

    <target name="consoleWrapper" xsi:type="AsyncWrapper">
      <target xsi:type="ColoredConsole"
              name="coloredConsole"
              layout="${longdate}|${pad:padding=5:inner=${level}}|${logger}|${message} ${exception}"
              useDefaultRowHighlightingRules="false"
              detectConsoleAvailable="true">
        <highlight-row condition="level == LogLevel.Debug" foregroundColor="Green" />
        <highlight-row condition="level == LogLevel.Info" foregroundColor="White" />
        <highlight-row condition="level == LogLevel.Warn" foregroundColor="Yellow" />
        <highlight-row condition="level == LogLevel.Error" foregroundColor="Red" />
        <highlight-row condition="level == LogLevel.Fatal" foregroundColor="Red" backgroundColor="White" />
      </target>
    </target>

  </targets>

  <!-- rules to map from logger name to target -->
  <rules>
    <!--All logs, including from Microsoft-->
    <logger name="*" minlevel="Trace" writeTo="allfile">
     <!-- <filters>
        <when condition="contains(message, 'Request starting HTTP/2 POST')" action="IgnoreFinal" />
        <when condition="contains(message, 'Request finished in')" action="IgnoreFinal" />
        <when condition="contains(message, 'Executing endpoint')" action="IgnoreFinal" />
        <when condition="contains(message, 'Executed endpoint')" action="IgnoreFinal" />
      </filters>-->
    </logger>

    <!--Skip non-critical Microsoft logs and so log only own logs-->
    <logger name="Microsoft.*" maxlevel="Info" final="true" >
      <!--<filters>
        <when condition="contains(message, 'Request starting HTTP/2 POST')" action="IgnoreFinal" />
        <when condition="contains(message, 'Request finished in')" action="IgnoreFinal" />
        <when condition="contains(message, 'Executing endpoint')" action="IgnoreFinal" />
        <when condition="contains(message, 'Executed endpoint')" action="IgnoreFinal" />
      </filters>-->
    </logger>
    <!-- BlackHole without writeTo -->
    <logger name="*" minlevel="Error" writeTo="errorfile" />

    <logger name="*" minlevel="Debug" writeTo="consoleWrapper">
      <!--<filters>
        <when condition="level == LogLevel.Debug and (starts-with(logger, 'Microsoft') or starts-with(logger, 'System'))" action="Ignore"></when>
        <when condition="level == LogLevel.Info and starts-with(logger, 'Microsoft.AspNetCore')" action="Ignore"></when>
      </filters>-->
    </logger>
  </rules>
</nlog>