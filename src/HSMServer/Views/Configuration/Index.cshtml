@using HSMServer.Constants
@using HSMServer.HtmlHelpers
@using HSMServer.Model.ViewModel
@model List<ConfigurationObjectViewModel>

@{ ViewData["Title"] = "Configuration"; }

<script>
    var setToDefaultAction = "@Html.Raw(Url.Action(ViewConstants.SetConfigObjectToDefaultAction, ViewConstants.ConfigurationController))";
    var saveAction = "@Html.Raw(Url.Action(ViewConstants.SaveConfigObjectAction, ViewConstants.ConfigurationController))";
</script>

<style>
    .default-text-field {
        font-weight: normal;
        color: grey;
        font-size: inherit;
        margin-left: 5px;
    }

    .config-name {
        margin-right: 10px;
    }
</style>

<div class="container">
    <div class="row justify-content-center">
        @if (!string.IsNullOrEmpty((string)ViewData["Version"]))
        {
            <div class="row align-items-center" style="margin-top: 10px">
                <p>Current version: @ViewData["Version"]</p>
            </div>
        }
        @ViewHelper.CreateConfigurationObjectsTable(Model)
    </div>
</div>


<script>
    //Description popovers
    $(document).ready(function () {
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl);
        });

        var popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'));
        var popoverList = popoverTriggerList.map(function (popoverTriggerEl) {
            return new bootstrap.Popover(popoverTriggerEl);
        });

        var popover = new bootstrap.Popover(document.querySelector('.popover-dismiss'), {
            trigger: 'focus'
        });
    });

    function createData(name, value, isDefault) {
        return {
            "Name": name,
            "Value": value,
            "IsDefault": isDefault
        }
    }

    $('[id^=cancel_]').on("click", function () {
        document.location.reload();
    });

    $('[id^=value_]').on("input", function () {
        name = this.id.substring("value_".length);

        $('#ok_' + name).prop('disabled', false);
        $('#cancel_' + name).prop('disabled', false);
    });

    $('[id^=ok_]').on("click", function () {
        name = this.id.substring("ok_".length);

        console.log(name);
        let value = $('#value_' + name).val();
        let data = createData(name, value, false);

        $.ajax({
            type: 'POST',
            url: saveAction,
            data: JSON.stringify(data),
            contentType: 'application/json',
            cache: false,
            async: true
        }).done(function (result) {
            document.location.reload();
        });
    });

    $('[id^=reset_]').on("click", function () {
        name = this.id.substring("reset_".length);

        $.ajax({
            type: 'GET',
            url: setToDefaultAction + "?Name=" + name,
            cache: false,
            async: true,
            success: function () {
                document.location.reload();
            }
        });
    });
</script>