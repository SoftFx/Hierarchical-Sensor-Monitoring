@using HSMServer.Model.ViewModel
@using HSMServer.Constants
@using HSMServer.HtmlHelpers
@model EditProductViewModel

@{ ViewData["Title"] = "Product " + Model.ProductName; }

<script src="~/js/clipboard.js/clipboard.min.js"></script>

<script>
    var addUserRight = "@Html.Raw(Url.Action(ViewConstants.AddUserRightAction, ViewConstants.ProductController))";
    var editUserRole = "@Html.Raw(Url.Action(ViewConstants.EditUserRoleAction, ViewConstants.ProductController))";
    var deleteUserRole = "@Html.Raw(Url.Action(ViewConstants.RemoveUserRoleAction, ViewConstants.ProductController))";
    var invite = "@Html.Raw(Url.Action(ViewConstants.InviteAction, ViewConstants.ProductController))";
</script>

<div class="modal fade" id="modalDelete" tabindex="-1" aria-labelledby="modalDeleteLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalDeleteLabel">Remove user right</h5>
            </div>

            <div id="modalDeleteBody" class="modal-body">

            </div>

            <div class="modal-footer">
                <button id="closeDeleteButton" type="button" class="btn btn-secondary" data-bs-dismiss="modalDelete">Close</button>
                <button id="confirmDeleteButton" type="button" class="btn btn-secondary">Confirm</button>
            </div>
        </div>
    </div>
</div>

<input id="productKey" value="@Model.ProductKey" style="display: none" />

<div class="container row justify-content-center">
    <div style="margin: 10px">
        <div class="row justify-content-start">
            <h5 style="margin: 10px 20px 10px">Invite Member</h5><br>
            <div style="margin-left: 0px">You can invite a new member to manage '@Model.ProductName'. Link is valid for 30 minutes.</div>


            <div class="mb-3">
                <label for="email" class="form-label">Email address</label>
                <input style="width: 300px" type="email" class="form-control" id="email" placeholder="name@example.com">
            </div>
            <!--<div class="mb-3">
                <label for="dateTime" class="form-label">Access expiration date</label>
                <input style="width: 300px" type="time" class="form-control" id="dateTime"
                       min="@DateTime.UtcNow.ToString("")"/>-->
                @*<input style="width: 300px" type="datetime-local" class="form-control" id="dateTime"
                       min="@DateTime.UtcNow.ToString("yyyy-MM-ddThh:mm:ss")"
                       max="@((DateTime.UtcNow + TimeSpan.FromMinutes(30)).ToString("yyyy-MM-ddThh:mm:ss"))"/>*@
            <!--</div>-->

            <div class="mb-3">
                <label for="productRole" class="form-label">Choose a role permission</label>
                @ViewHelper.CreateProductRoleSelect()
            </div>

            <span id="new_invite_span" style="display: none"></span>

            <div class="mb-3">
                <button style="width: 100px" id="inviteButton" type="submit" class="btn btn-secondary">
                 <i class="fas fa-envelope"></i> Invite</button>
            </div>
        </div>
    </div>

    @ViewHelper.CreateUsersRightsTable(Context.User, Model, TempData[TextConstants.TempDataNotAdminUsersText])
</div>

<script>
    let userErrorText = '@TempData[TextConstants.TempDataUserErrorText]';
    if (userErrorText !== undefined) {
        let userErrorSpan = document.getElementById('new_user_span');
        userErrorSpan.textContent = userErrorText;
        userErrorSpan.setAttribute("style", "display: block;color: red;font-size: large;font-weight: normal;white-space: pre-line");
    }

    let inviteErrorText = '@TempData[TextConstants.TempDataInviteErrorText]';
    if (inviteErrorText !== undefined) {
        let inviteErrorSpan = document.getElementById('new_invite_span');
        inviteErrorSpan.textContent = inviteErrorText;
        inviteErrorSpan.setAttribute("style", "display: block;color: red;font-size: large;font-weight: normal;white-space: pre-line");
    }

    //copy buttons
    var clipboard = new ClipboardJS('[id^="copy_"]');
</script>

<script>
    function createInviteData(productKey, email, dateTime, productRole) {
        return {
            "ProductKey": productKey,
            "Email": email,
            "ExpirationDate": dateTime,
            "Role": productRole
        }
    }

    $('#inviteButton').on('click', function () {
        productKey = $('#productKey').val();
        email = $('#email').val();
        dateTime = null;//$('#dateTime').val();
        productRole = $('#productRole').val();

        data = createInviteData(productKey, email, dateTime, productRole);

        $.ajax({
            type: 'POST',
            url: invite,
            data: JSON.stringify(data),
            contentType: 'application/json',
            cache: false,
            async: true,
            success: function () {
                document.location.reload();
            }
        });
    });
</script>

<script>
    function createUserRightData(userId, role, productKey) {
        return { "ProductKey": productKey, "UserId": userId, "ProductRole": role }
    }

    //create user
    $('#createButton').on('click', function () {
        userId = $('#createUser').val();
        role = $('#createProductRole').val();
        productKey = $('#productKey').val();

        data = createUserRightData(userId, role, productKey);
        //console.log(JSON.stringify(data));

        $.ajax({
            type: 'POST',
            url: addUserRight,
            data: JSON.stringify(data),
            contentType: 'application/json',
            cache: false,
            async: true,
            success: function () {
                document.location.reload();
            }
        });
    });

    //delete user
    $('[id^=delete_]').on('click', function () {
        username = this.id.substring('delete_'.length, this.id.length);
        userId = $('#userId_' + username).val();
        productKey = $('#productKey').val();

        var data = createUserRightData(userId, 0, productKey);

        $('#modalDeleteLabel').empty();
        $('#modalDeleteLabel').append('Remove user right');
        $('#modalDeleteBody').empty();
        $('#modalDeleteBody').append('Do you really want to remove "' + username + '" user right?');

        var modal = new bootstrap.Modal(document.getElementById('modalDelete'));
        modal.show();

        //modal confirm
        $('#confirmDeleteButton').on('click', function () {
            modal.hide();

            $.ajax({
                type: 'POST',
                url: deleteUserRole,
                data: JSON.stringify(data),
                contentType: 'application/json',
                cache: false,
                async: true,
                success: function () {
                    document.location.reload();
                }
            });
        });

        //modal close
        $('#closeDeleteButton').on('click', function () {
            modal.hide();
        });
    });

    //change user
    $('[id^=change_]').on('click', function () {
        username = this.id.substring('change_'.length, this.id.length);

        $('[id^=role_]').attr('disabled', true);
        $('[id^=ok_]').attr('disabled', true);
        $('[id^=cancel_]').attr('disabled', true);

        $('#role_' + username).removeAttr("disabled");
        $('#ok_' + username).removeAttr("disabled");
        $('#cancel_' + username).removeAttr("disabled");
    });

    $('[id^=cancel_]').on('click', function () {
        document.location.reload();
    });

    $('[id^=ok_]').on('click', function () {
        username = this.id.substring('ok_'.length, this.id.length);

        userId = $('#userId_' + username).val();
        role = $('#role_' + username).val();
        productKey = $('#productKey').val();

        var data = createUserRightData(userId, role, productKey);
        $.ajax({
            type: 'POST',
            url: editUserRole,
            data: JSON.stringify(data),
            contentType: 'application/json',
            cache: false,
            async: true,
            success: function () {
                document.location.reload();
            }
        });
    });

</script>