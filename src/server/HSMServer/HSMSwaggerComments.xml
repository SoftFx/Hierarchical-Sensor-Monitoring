<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HSMServer</name>
    </assembly>
    <members>
        <member name="M:HSMServer.Authentication.IUserManager.AddUser(System.String,System.String,System.Boolean,System.Collections.Generic.List{System.ValueTuple{System.Guid,HSMServer.Model.Authentication.ProductRoleEnum}})">
            <summary>
            Add new user with the specified parameters
            </summary>
            <param name="userName">Login of the new user, must be unique and not empty</param>
            <param name="passwordHash">Password hash computed with HashComputer.ComputePasswordHash().</param>
        </member>
        <member name="M:HSMServer.Authentication.IUserManager.UpdateUser(HSMServer.Model.Authentication.User)">
            <summary>
            New user object
            </summary>
            <param name="user">User object (password field must be password hash).</param>
        </member>
        <member name="M:HSMServer.Controllers.GrafanaDatasources.JsonSource.JsonDatasourceController.TestConnection">
            <summary>
            with 200 status code response. Used for "Test connection" on the datasource config page.
            </summary>
        </member>
        <member name="M:HSMServer.Controllers.GrafanaDatasources.JsonSource.JsonDatasourceController.GetMetrics(HSMServer.Controllers.GrafanaDatasources.JsonSource.MetricsRequest)">
            <summary>
            to return available Products
            </summary>
        </member>
        <member name="M:HSMServer.Controllers.GrafanaDatasources.JsonSource.JsonDatasourceController.GetOptions(HSMServer.Controllers.GrafanaDatasources.JsonSource.MetricPayloadOptionsRequest)">
            <summary>
            to return a list of metric payload options (Sensors paths and data formats).
            </summary>
        </member>
        <member name="M:HSMServer.Controllers.GrafanaDatasources.JsonSource.JsonDatasourceController.ReadHistory(HSMServer.Controllers.GrafanaDatasources.JsonSource.QueryHistoryRequest)">
            <summary>
            to return panel data or annotations
            </summary>
        </member>
        <member name="T:HSMServer.Controllers.SensorsController">
            <summary>
            Controller for receiving sensors data via https protocol. There is a default product for testing swagger methods.
            </summary>
        </member>
        <member name="M:HSMServer.Controllers.SensorsController.Post(HSMSensorDataObjects.SensorValueRequests.BoolSensorValue)">
            <summary>
            Receives value of bool sensor
            </summary>
            <param name="sensorValue"></param>
            <returns></returns>
        </member>
        <member name="M:HSMServer.Controllers.SensorsController.Post(HSMSensorDataObjects.SensorValueRequests.IntSensorValue)">
            <summary>
            Receives value of int sensor
            </summary>
            <param name="sensorValue"></param>
            <returns></returns>
        </member>
        <member name="M:HSMServer.Controllers.SensorsController.Post(HSMSensorDataObjects.SensorValueRequests.DoubleSensorValue)">
            <summary>
            Receives value of double sensor
            </summary>
            <param name="sensorValue"></param>
            <returns></returns>
        </member>
        <member name="M:HSMServer.Controllers.SensorsController.Post(HSMSensorDataObjects.SensorValueRequests.StringSensorValue)">
            <summary>
            Receives value of string sensor
            </summary>
            <param name="sensorValue"></param>
            <returns></returns>
        </member>
        <member name="M:HSMServer.Controllers.SensorsController.Post(HSMSensorDataObjects.SensorValueRequests.TimeSpanSensorValue)">
            <summary>
            Receives value of timespan sensor
            </summary>
            <param name="sensorValue"></param>
            <returns></returns>
        </member>
        <member name="M:HSMServer.Controllers.SensorsController.Post(HSMServer.ApiObjectsConverters.VersionSensor)">
            <summary>
            Receives value of version sensor
            </summary>
            <param name="sensorValue"></param>
            <returns></returns>
        </member>
        <member name="M:HSMServer.Controllers.SensorsController.Post(HSMSensorDataObjects.SensorValueRequests.RateSensorValue)">
            <summary>
            Receives value of rate sensor
            </summary>
            <param name="sensorValue"></param>
            <returns></returns>
        </member>
        <member name="M:HSMServer.Controllers.SensorsController.Post(HSMSensorDataObjects.SensorValueRequests.DoubleBarSensorValue)">
            <summary>
            Receives value of double bar sensor
            </summary>
            <param name="sensorValue"></param>
            <returns></returns>
        </member>
        <member name="M:HSMServer.Controllers.SensorsController.Post(HSMSensorDataObjects.SensorValueRequests.IntBarSensorValue)">
            <summary>
            Receives value of integer bar sensor
            </summary>
            <param name="sensorValue"></param>
            <returns></returns>
        </member>
        <member name="M:HSMServer.Controllers.SensorsController.Post(HSMSensorDataObjects.SensorValueRequests.FileSensorValue)">
            <summary>
            Receives the value of file sensor, where the file contents are presented as byte array.
            </summary>
            <param name="sensorValue"></param>
            <returns></returns>
        </member>
        <member name="M:HSMServer.Controllers.SensorsController.Post(System.Collections.Generic.List{HSMSensorDataObjects.SensorValueRequests.SensorValueBase})">
            <summary>
            Accepts data in SensorValueBase format. Converts data to a typed format and saves it to the database.
            The key must be unique and stored in the header.
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:HSMServer.Controllers.SensorsController.Post(System.Collections.Generic.List{HSMServer.ObsoleteUnitedSensorValue.UnitedSensorValue})">
            <summary>
            Obsolete method. Will be removed.
            Accepts data in UnitedSensorValue format. Converts data to a typed format and saves it to the database.
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:HSMServer.Controllers.SensorsController.Get(HSMSensorDataObjects.HistoryRequests.HistoryRequest)">
            <summary>
            Get history [from, to] or [from - count] for some sensor
            </summary>
        </member>
        <member name="M:HSMServer.Controllers.SensorsController.Get(HSMSensorDataObjects.HistoryRequests.FileHistoryRequest)">
            <summary>
            Get file (csv or txt) history [from, to] or [from - count] for some sensor
            </summary>
        </member>
        <member name="M:HSMServer.Controllers.SensorsController.Post(HSMSensorDataObjects.SensorRequests.AddOrUpdateSensorRequest)">
            <summary>
            Add new sensor with selected properties or update sensor meta info
            </summary>
            <param name="sensorUpdate"></param>
            <returns></returns>
        </member>
        <member name="M:HSMServer.Controllers.SensorsController.Post(System.Collections.Generic.List{HSMSensorDataObjects.CommandRequestBase})">
            <summary>
            List of sensor commands
            </summary>
            <param name="sensorCommands"></param>
            <returns>Dictionary that contains commands error. Key is path to sensor, Value is error</returns>
        </member>
        <member name="T:HSMServer.Filters.DataRequestHeaderSwaggerFilter">
            <summary>
            Swagger filter for adding required string 'Key' in API requests header
            </summary>
        </member>
        <member name="T:HSMServer.Filters.UserRoleFilterBase">
            <summary>
            The attribute denies access to some actions for a user who is neither admin or has role from _roles
            </summary>
        </member>
        <member name="M:HSMServer.Model.History.BarHistoryProcessor`1.AddValueFromLists(HSMServer.Model.History.SummaryBarItem{`0})">
            <summary>
            Set fields, for which collecting lists of values is required
            </summary>
            <param name="summary"></param>
        </member>
        <member name="M:HSMServer.Model.History.BarHistoryProcessor`1.ProcessItem(HSMServer.Core.Model.BarBaseValue{`0},HSMServer.Model.History.SummaryBarItem{`0},System.Boolean@)">
            <summary>
            This method applies possible changes to the current data item for fields, for which collecting datas is not required
            </summary>
            <param name="value">Currently processed data item</param>
            <param name="summary">Current summary item</param>
            <param name="IsCompressed">Current state of compression of summary</param>
        </member>
        <member name="M:HSMServer.Model.History.BarHistoryProcessor`1.CountMean(System.Collections.Generic.List{System.ValueTuple{`0,System.Int32}})">
            <summary>
            Count mean from the list of all means
            </summary>
            <param name="means"></param>
            <returns></returns>
        </member>
        <member name="M:HSMServer.PathTemplates.PathTemplateConverter.EmptyVariableToRegex">
            <remarks>
            Pattern:<br/>
            <code>\\*</code><br/>
            Explanation:<br/>
            <code>
            â—‹ Match '*'.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:HSMServer.PathTemplates.PathTemplateConverter.NamedVariableToRegex">
            <remarks>
            Pattern:<br/>
            <code>\\{(.*?)\\}</code><br/>
            Explanation:<br/>
            <code>
            â—‹ Match '{'.<br/>
            â—‹ 1st capture group.<br/>
                â—‹ Match a character other than '\n' lazily any number of times.<br/>
            â—‹ Match '}'.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:HSMServer.PathTemplates.PathTemplateConverter.ClearVariableName">
            <remarks>
            Pattern:<br/>
            <code>[\\{\\}\\(\\)]+</code><br/>
            Explanation:<br/>
            <code>
            â—‹ Match a character in the set [(){}] atomically at least once.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:HSMServer.PathTemplates.PathTemplateConverter.EscapeConstParts">
            <remarks>
            Pattern:<br/>
            <code>[^\\*\\{(.*?)\\}]+</code><br/>
            Explanation:<br/>
            <code>
            â—‹ Match a character in the set [^(-*.?{}] atomically at least once.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.EmptyVariableToRegex_0">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the EmptyVariableToRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.EmptyVariableToRegex_0.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.EmptyVariableToRegex_0.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.EmptyVariableToRegex_0.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.EmptyVariableToRegex_0.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.EmptyVariableToRegex_0.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.EmptyVariableToRegex_0.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.EmptyVariableToRegex_0.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.NamedVariableToRegex_1">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the NamedVariableToRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.NamedVariableToRegex_1.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NamedVariableToRegex_1.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.NamedVariableToRegex_1.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NamedVariableToRegex_1.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.NamedVariableToRegex_1.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NamedVariableToRegex_1.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NamedVariableToRegex_1.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NamedVariableToRegex_1.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ClearVariableName_2">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the ClearVariableName method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.ClearVariableName_2.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ClearVariableName_2.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ClearVariableName_2.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ClearVariableName_2.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ClearVariableName_2.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ClearVariableName_2.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ClearVariableName_2.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ClearVariableName_2.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.EscapeConstParts_3">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the EscapeConstParts method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.EscapeConstParts_3.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.EscapeConstParts_3.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.EscapeConstParts_3.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.EscapeConstParts_3.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.EscapeConstParts_3.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.EscapeConstParts_3.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.EscapeConstParts_3.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.EscapeConstParts_3.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utilities">
            <summary>Helper methods used by generated <see cref="T:System.Text.RegularExpressions.Regex"/>-derived implementations.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout">
            <summary>Default timeout value set in <see cref="T:System.AppContext"/>, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout"/> if none was set.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_hasTimeout">
            <summary>Whether <see cref="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout"/> is non-infinite.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_ascii_300000000000000000028">
            <summary>Supports searching for characters in or not in "(){}".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_ascii_4700800000000000000028">
            <summary>Supports searching for characters in or not in "()*.?{}".</summary>
        </member>
    </members>
</doc>
