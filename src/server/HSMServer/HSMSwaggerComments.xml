<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HSMServer</name>
    </assembly>
    <members>
        <member name="M:HSMServer.Authentication.IUserManager.AddUser(System.String,System.String,System.String,System.String,System.Boolean,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,HSMServer.Model.Authentication.ProductRoleEnum}})">
            <summary>
            Add new user with the specified parameters
            </summary>
            <param name="userName">Login of the new user, must be unique and not empty</param>
            <param name="certificateThumbprint">Can be empty for website users</param>
            <param name="certificateFileName">Must end with .crt (certificate files extension), can be empty for website users</param>
            <param name="passwordHash">Password hash computed with HashComputer.ComputePasswordHash().</param>
        </member>
        <member name="M:HSMServer.Authentication.IUserManager.UpdateUser(HSMServer.Model.Authentication.User)">
            <summary>
            New user object
            </summary>
            <param name="user">User object (password field must be password hash).</param>
        </member>
        <member name="M:HSMServer.Authentication.IUserManager.RemoveUser(System.String)">
            <summary>
            Remove user with the specified userName
            </summary>
            <param name="userName">Name of the user to remove.</param>
        </member>
        <member name="T:HSMServer.BackgroundTask.DatabaseMonitoringService">
            <summary>
            Background service, which reports database size every 5 minutes 
            </summary>
        </member>
        <member name="T:HSMServer.BackgroundTask.OutdatedSensorService">
            <summary>
            This class is derived from BackgroundService. Every day, all sensors are checked. Sensors with latest updated older
            than a specified parameter value are deleted
            </summary>
        </member>
        <member name="T:HSMServer.Controllers.SensorsController">
            <summary>
            Controller for receiving sensors data via https protocol. There is a default product for testing swagger methods.
            </summary>
        </member>
        <member name="M:HSMServer.Controllers.SensorsController.Post(HSMSensorDataObjects.SensorValueRequests.IntSensorValue)">
            <summary>
            Receives value of int sensor
            </summary>
            <param name="sensorValue"></param>
            <returns></returns>
        </member>
        <member name="M:HSMServer.Controllers.SensorsController.Post(HSMSensorDataObjects.SensorValueRequests.DoubleSensorValue)">
            <summary>
            Receives value of double sensor
            </summary>
            <param name="sensorValue"></param>
            <returns></returns>
        </member>
        <member name="M:HSMServer.Controllers.SensorsController.Post(HSMSensorDataObjects.SensorValueRequests.StringSensorValue)">
            <summary>
            Receives value of string sensor
            </summary>
            <param name="sensorValue"></param>
            <returns></returns>
        </member>
        <member name="M:HSMServer.Controllers.SensorsController.Post(HSMSensorDataObjects.SensorValueRequests.TimeSpanSensorValue)">
            <summary>
            Receives value of timespan sensor
            </summary>
            <param name="sensorValue"></param>
            <returns></returns>
        </member>
        <member name="M:HSMServer.Controllers.SensorsController.Post(HSMSensorDataObjects.SensorValueRequests.DoubleBarSensorValue)">
            <summary>
            Receives value of double bar sensor
            </summary>
            <param name="sensorValue"></param>
            <returns></returns>
        </member>
        <member name="M:HSMServer.Controllers.SensorsController.Post(HSMSensorDataObjects.SensorValueRequests.IntBarSensorValue)">
            <summary>
            Receives value of integer bar sensor
            </summary>
            <param name="sensorValue"></param>
            <returns></returns>
        </member>
        <member name="M:HSMServer.Controllers.SensorsController.Post(HSMSensorDataObjects.SensorValueRequests.FileSensorValue)">
            <summary>
            Receives the value of file sensor, where the file contents are presented as byte array.
            </summary>
            <param name="sensorValue"></param>
            <returns></returns>
        </member>
        <member name="M:HSMServer.Controllers.SensorsController.Post(System.Collections.Generic.List{HSMSensorDataObjects.SensorValueRequests.SensorValueBase})">
            <summary>
            Accepts data in SensorValueBase format. Converts data to a typed format and saves it to the database.
            The key must be unique and stored in the header.
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:HSMServer.Controllers.SensorsController.Post(System.Collections.Generic.List{HSMServer.ObsoleteUnitedSensorValue.UnitedSensorValue})">
            <summary>
            Obsolete method. Will be removed.
            Accepts data in UnitedSensorValue format. Converts data to a typed format and saves it to the database.
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:HSMServer.Controllers.SensorsController.Get(HSMSensorDataObjects.HistoryRequests.HistoryRequest)">
            <summary>
            Get history [from, to] or [from - count] for some sensor
            </summary>
        </member>
        <member name="M:HSMServer.Controllers.SensorsController.Get(HSMSensorDataObjects.HistoryRequests.FileHistoryRequest)">
            <summary>
            Get file (csv or txt) history [from, to] or [from - count] for some sensor
            </summary>
        </member>
        <member name="T:HSMServer.Filters.DataRequestHeaderSwaggerFilter">
            <summary>
            Swagger filter for adding required string 'Key' in API requests header
            </summary>
        </member>
        <member name="T:HSMServer.Filters.ProductRoleFilters.ProductRoleFilterBase">
            <summary>
            The attribute denies access to some actions for a user who is neither admin or has role from _roles
            </summary>
        </member>
        <member name="M:HSMServer.Model.Authentication.User.Update(HSMServer.Model.Authentication.User)">
            <summary>
            Update works as HTTP PUT: all the fields will be updated
            </summary>
            <param name="user"></param>
        </member>
    </members>
</doc>
