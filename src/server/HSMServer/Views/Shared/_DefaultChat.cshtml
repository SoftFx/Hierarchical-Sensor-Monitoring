@using HSMCommon.Extensions
@using HSMServer.Model.Controls
@using HSMServer.Notifications
@using HSMServer.Extensions

@model DefaultChatViewModel

@inject ITelegramChatsManager ChatsManager

@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

@{
    var displayName = Model.GetCurrentDisplayValue(ChatsManager.GetValues(), out var allChats);
    var parentName = Model.GetParentDisplayValue(allChats);
}


<span class="@(Model.IsModify ? "col-2" : "meta-info-label")">Telegram chat(s)</span>

<span id="labelDefaultChat" class="@(Model.IsModify ? "d-none" : "meta-info-value")">@displayName</span>
<div id="defaultChatControl" class="@(Model.IsModify ? "col-auto ms-1" : "d-none meta-info-interval")">
    <select name="SelectedChats" class="default-chat selectpicker" multiple data-live-search="true" data-placeholder="Default telegram chat(s)" required>
        @if (Model.HasParent)
        {
            <option value="@DefaultChatMode.FromParent" selected="@Model.IsSelectedMode(DefaultChatMode.FromParent)">@parentName</option>
        }

        <option value="@DefaultChatMode.NotInitialized" selected="@Model.IsSelectedMode(DefaultChatMode.NotInitialized)">@DefaultChatMode.NotInitialized.GetDisplayName()</option>
        <option value="@DefaultChatMode.Empty" selected="@Model.IsSelectedMode(DefaultChatMode.Empty)">@DefaultChatMode.Empty.GetDisplayName()</option>

        <option data-divider="true"></option>
        <option disabled>Groups</option>
        @foreach (var chat in allChats.GetGroups())
        {
            <option value="@chat.Id" selected="@Model.IsSelectedChat(chat)">@chat.Name</option>
        }

        <option data-divider="true"></option>
        <option disabled>Users</option>
        @foreach (var chat in allChats.GetPrivates())
        {
            <option value="@chat.Id" selected="@Model.IsSelectedChat(chat)">@chat.Name</option>
        }
    </select>
</div>

<i class='fas fa-question-circle mx-2' title='Telegram chat that will be default for new sensors.'></i>


<script>
    $(document).ready(function () {
        $("select[name='SelectedChats']").selectpicker();
        $("select[name='SelectedChats']").off('changed.bs.select').on('changed.bs.select', function (e, clickedIndex, isSelected, previousValue, a) {
            const clickedValue = $(this)[0].options[clickedIndex].value;
            if (clickedValue === 'Empty' || clickedValue === 'NotInitialized' && isSelected) {
                $(this).val($(this)[0].options[clickedIndex].value);   
            }
            else {
                const index = Array.from($("select[name='SelectedChats']")[0].selectedOptions).find(x => x.value === 'NotInitialized' || x === 'Empty');
                
                if (index !== undefined)
                    $(this).val($(this)[0].options[clickedIndex].value);
            }

            $(this).selectpicker('refresh')
        });
    })

    function fillDefaultChatMode(formData) {
        let chatsMode = '@DefaultChatMode.Custom';
        let chats = [];

        $(document).find("select[name='SelectedChats']:first option").each(function () {
            if ($(this).is(':selected')) {
                if ($(this).val() === '@DefaultChatMode.FromParent' || $(this).val() === '@DefaultChatMode.NotInitialized' ||
                    $(this).val() === '@DefaultChatMode.Empty') {
                    chatsMode = $(this).val();
                    chats = [];
                    return;
                }
        
                chats.push($(this).val());
            }
        });

        formData.append(`DefaultChats.ChatMode`, chatsMode);

        for (let k = 0; k < chats.length; ++k) {
            formData.append(`DefaultChats.SelectedChats[${k}]`, chats[k]);
        }
    }
</script>
