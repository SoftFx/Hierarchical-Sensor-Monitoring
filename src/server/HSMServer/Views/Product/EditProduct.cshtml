@using HSMServer.Model.ViewModel
@using HSMServer.Constants
@using HSMServer.Controllers
@using HSMServer.Model.Authentication
@using HSMServer.Model.AccessKeysViewModels
@using Microsoft.AspNetCore.Mvc.TagHelpers
@model EditProductViewModel

@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

@{ ViewData["Title"] = $"Product {Model.ProductName}"; }

<link rel="stylesheet" href="~/css/bundles/accessKeyBundle.min.css"/>
<script src="~/js/clipboard.js/clipboard.min.js"></script>

<script>
    var addUserRight = "@Html.Raw(Url.Action(ViewConstants.AddUserRightAction, ViewConstants.ProductController))";
    var editUserRole = "@Html.Raw(Url.Action(ViewConstants.EditUserRoleAction, ViewConstants.ProductController))";
    var deleteUserRole = "@Html.Raw(Url.Action(ViewConstants.RemoveUserRoleAction, ViewConstants.ProductController))";
    var invite = "@Html.Raw(Url.Action(ViewConstants.InviteAction, ViewConstants.ProductController))";
</script>

<div class="modal fade" id="modalDelete" tabindex="-1" aria-labelledby="modalDeleteLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalDeleteLabel">Remove user right</h5>
            </div>

            <div id="modalDeleteBody" class="modal-body">

            </div>

            <div class="modal-footer">
                <button id="closeDeleteButton" type="button" class="btn btn-secondary" data-bs-dismiss="modalDelete">Close</button>
                <button id="confirmDeleteButton" type="button" class="btn btn-secondary">Confirm</button>
            </div>
        </div>
    </div>
</div>

<input id="productKey" value="@Model.ProductId" style="display: none"/>
<input id="encodedProductId" value="@Model.EncodedProductId" style="display: none"/>

<div class="container">
    <div class="row justify-content-center">
            <h4 class="my-3">Edit product '@Model.ProductName'</h4>
    
            @*<div style="margin: 10px">
                    <div class="row justify-content-start">
                        <h5 style="margin: 10px 20px 10px">Invite Member</h5><br>
                        <div style="margin-left: 0px">You can invite a new member to manage '@Model.ProductName'. Link is valid for 30 minutes.</div>
    
    
                        <div class="mb-3">
                            <label for="email" class="form-label">Email address</label>
                            <input style="width: 300px" type="email" class="form-control" id="email" placeholder="name@example.com">
                        </div>
    
                        <div class="mb-3">
                            <label for="productRole" class="form-label">Choose a role permission</label>
                            @ViewHelper.CreateProductRoleSelect()
                        </div>
    
                        <span id="new_invite_span" style="display: none"></span>
    
                        <div class="mb-3">
                            <button style="width: 100px" id="inviteButton" type="submit" class="btn btn-secondary">
                                <i class="fas fa-envelope"></i> Invite
                            </button>
                        </div>
                    </div>
                </div>*@
    
            <div class="my-1">
                <div>
                    <div class='row justify-content-start'>
                        <h5 class='mt-1'>Members</h5>
                    </div>
                </div>
                <div class='col-xxl'>
                    <table class='table table-striped'>
                        <thead>
                        <tr>
                            <th scope='col'>#</th>
                            <th scope='col'>Account</th>
                            <th scope='col'>Role</th>
                            <th scope='col'>Action</th>
                        </tr>
                        </thead>
                        <tbody>
                        <tr>
                            <th>0</th>
                            <th>
                                @if (Model.NotAdminUsers.Count != 0)
                                {
                                    <select class='form-select' id='createUser'>
                                        @foreach (var user in Model.NotAdminUsers)
                                        {
                                            <option value='@user.UserId'>@user.Username</option>
                                        }
                                    </select>
                                }
                                else
                                {
                                    <select disabled class='form-select' id='createUser'></select>
                                }
                                <span class="d-none" id='new_user_span'></span>
                            </th>
                            <th>
                                <select class='form-select' id='createProductRole'>
                                    @foreach (ProductRoleEnum role in Enum.GetValues<ProductRoleEnum>())
                                    {
                                        <option value='@((int)role)'>@role</option>
                                    }
                                </select>
                            </th>
                            <th>
                                <button id='createButton' type='button' class='btn btn-secondary ms-1' title='create'>
                                    <i class='fas fa-plus'></i>
                                </button>
                            </th>
                        </tr>
                        @for(var i = 0; i < Model.UsersRights.Count; i++)
                            {
                                var userRight = Model.UsersRights[i];
                                <tr>
                                    <th scope='row'>@(i + 1)</th>
                                    <td>
                                        @userRight.Item1.Username
                                        <input id='userId_@userRight.Item1.Username' class="d-none" value='@userRight.Item1.UserId'/>
                                    </td>
                                    <td>
                                        <select class='form-select' disabled id='role_@userRight.Item1.Username'>
                                            @foreach (ProductRoleEnum role in Enum.GetValues<ProductRoleEnum>())
                                            {
                                                if (role == userRight.Item2)
                                                {
                                                    <option selected value='@((int)role)'>@role</option>
                                                }
                                                else
                                                {
                                                    <option value='@((int)role)'>@role</option>
                                                }
                                            }
                                        </select>
                                    </td>
                                    <td>
                                        <button id='change_@userRight.Item1.Username'
                                                type='button' class='btn btn-secondary ms-1' title='edit'>
                                            <i class='fas fa-edit'></i>
                                        </button>
    
                                        <button id='delete_@userRight.Item1.Username'
                                                type='button' class='btn btn-secondary ms-1' title='delete'>
                                            <i class='fas fa-trash-alt'></i>
                                        </button>
    
                                        <button disabled id='ok_@userRight.Item1.Username'
                                                type='button' class='btn btn-secondary ms-1' title='ok'>
                                            <i class='fas fa-check'></i>
                                        </button>
    
                                        <button disabled id='cancel_@userRight.Item1.Username'
                                                type='button' class='btn btn-secondary ms-1' title='cancel'>
                                            <i class='fas fa-times'></i>
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
    
            <div class="my-1">
                <div class="row">
                    <h5 class="col-auto mt-2">Access keys</h5>
                    <button type='button' class='btn btn-secondary col-auto' title='add access key' onclick="addAccessKeyButtonClick()">
                        <i class='fas fa-plus'></i>
                    </button>
                </div>
                
                @await Html.PartialAsync("~/Views/AccessKeys/_AllAccessKeys.cshtml",new AccessKeyTableViewModel(){Keys  = Model.AccessKeys})
            </div>
    
            <div class="my-1">
                <h5>Telegram groups <i class="fab fa-telegram"></i></h5>
    
                <h6 class="fw-bold">Messages settings</h6>
    
                <form class="mx-4 my-2" method="post" asp-controller="@ViewConstants.NotificationsController"
                      asp-action="@nameof(NotificationsController.UpdateTelegramSettings)"
                      asp-route-productId="@Model.EncodedProductId">
                    @await Html.PartialAsync("~/Views/Notifications/_NotificationsSettings.cshtml", Model.Telegram)
                </form>
    
                <div class="my-2">
                    <div class="row">
                        <h6 class="col-auto fw-bold">Groups</h6>
                        @if (Model.Telegram.Chats.Count == 0)
                        {
                            <h6 class="col-auto p-0">(There are no authorized groups)</h6>
                        }
                    </div>
    
                    <div class="row mx-4 my-1">
                        <label class="col-auto p-0">If you want to start getting messages in telegram group</label>
                        <div class="col-auto">
                            <a href="javascript:getGroupStartCommand()">copy message</a>
                        </div>
                        <label class="col-auto p-0">and send it in your telegram group. (Telegram bot should be added in the group and has admin rights)</label>
                    </div>
                    @if (Model.Telegram.Chats.Count > 0)
                    {
                        <table class="table mx-4">
                            <tr>
                                <th>Group name</th>
                                <th>Authorized</th>
                                <th style="text-align:center">Actions</th>
                            </tr>
                            @foreach (var group in Model.Telegram.Chats)
                            {
                                <tr>
                                    <td>
                                        <a target="_blank" asp-controller="@ViewConstants.NotificationsController"
                                           asp-action="@nameof(NotificationsController.OpenTelegramGroup)"
                                           asp-route-chatId="@group.ChatId">
                                            @group.Name
                                        </a>
                                    </td>
                                    <td>@group.AuthorizationTime</td>
                                    <td style="text-align:center">
                                        <div class="dropdown">
                                            <i class="fa-solid fa-ellipsis-vertical" data-bs-toggle="dropdown" style="cursor: pointer"></i>
                                            <div class="dropdown-menu">
                                                <a class="dropdown-item" asp-controller="@ViewConstants.NotificationsController"
                                                   asp-action="@nameof(NotificationsController.SendTestTelegramMessage)"
                                                   asp-route-productId="@Model.EncodedProductId"
                                                   asp-route-chatId="@group.ChatId">
                                                    Send test message
                                                </a>
                                                <a class="dropdown-item" asp-controller="@ViewConstants.NotificationsController"
                                                   asp-action="@nameof(NotificationsController.RemoveTelegramAuthorization)"
                                                   asp-route-productId="@Model.EncodedProductId"
                                                   asp-route-chatId="@group.ChatId">
                                                    Remove authorization
                                                </a>
                                            </div>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </table>
                    }
                </div>
            </div>
        </div>
</div>

@await Html.PartialAsync("~/Views/AccessKeys/_AccessKeysModal.cshtml")

<script>
    let userErrorText = '@TempData[TextConstants.TempDataUserErrorText]';
    if (userErrorText !== undefined) {
        let userErrorSpan = document.getElementById('new_user_span');
        userErrorSpan.textContent = userErrorText;
        userErrorSpan.setAttribute("style", "display: block;color: red;font-size: large;font-weight: normal;white-space: pre-line");
    }

    //let inviteErrorText = '@TempData[TextConstants.TempDataInviteErrorText]';
    //if (inviteErrorText !== undefined) {
    //    let inviteErrorSpan = document.getElementById('new_invite_span');
    //    inviteErrorSpan.textContent = inviteErrorText;
    //    inviteErrorSpan.setAttribute("style", "display: block;color: red;font-size: large;font-weight: normal;white-space: pre-line");
    //}

    //copy buttons
    var clipboard = new ClipboardJS('[id^="copy_"]');
</script>

@*<script>
    function createInviteData(productKey, email, dateTime, productRole) {
        return {
            "ProductKey": productKey,
            "Email": email,
            "ExpirationDate": dateTime,
            "Role": productRole
        }
    }

    $('#inviteButton').on('click', function () {
        productKey = $('#productKey').val();
        email = $('#email').val();
        dateTime = null;//$('#dateTime').val();
        productRole = $('#productRole').val();

        data = createInviteData(productKey, email, dateTime, productRole);

        $.ajax({
            type: 'POST',
            url: invite,
            data: JSON.stringify(data),
            contentType: 'application/json',
            cache: false,
            async: true,
            success: function () {
                document.location.reload();
            }
        });
    });
</script>*@

<script>
    function createUserRightData(userId, role, productKey) {
        return { "ProductKey": productKey, "UserId": userId, "ProductRole": role }
    }

    //create user
    $('#createButton').on('click', function () {
        userId = $('#createUser').val();
        role = $('#createProductRole').val();
        productKey = $('#productKey').val();

        data = createUserRightData(userId, role, productKey);

        $.ajax({
            type: 'POST',
            url: addUserRight,
            data: JSON.stringify(data),
            contentType: 'application/json',
            cache: false,
            async: true,
            success: function () {
                document.location.reload();
            }
        });
    });

    //delete user
    $('[id^=delete_]').on('click', function () {
        username = this.id.substring('delete_'.length, this.id.length);
        userId = $('#userId_' + username).val();
        productKey = $('#productKey').val();

        var data = createUserRightData(userId, 0, productKey);

        $('#modalDeleteLabel').empty();
        $('#modalDeleteLabel').append('Remove user right');
        $('#modalDeleteBody').empty();
        $('#modalDeleteBody').append('Do you really want to remove "' + username + '" user right?');

        var modal = new bootstrap.Modal(document.getElementById('modalDelete'));
        modal.show();

        //modal confirm
        $('#confirmDeleteButton').on('click', function () {
            modal.hide();

            $.ajax({
                type: 'POST',
                url: deleteUserRole,
                data: JSON.stringify(data),
                contentType: 'application/json',
                cache: false,
                async: true,
                success: function () {
                    document.location.reload();
                }
            });
        });

        //modal close
        $('#closeDeleteButton').on('click', function () {
            modal.hide();
        });
    });

    //change user
    $('[id^=change_]').on('click', function () {
        username = this.id.substring('change_'.length, this.id.length);

        $('[id^=role_]').attr('disabled', true);
        $('[id^=ok_]').attr('disabled', true);
        $('[id^=cancel_]').attr('disabled', true);

        $('#role_' + username).removeAttr("disabled");
        $('#ok_' + username).removeAttr("disabled");
        $('#cancel_' + username).removeAttr("disabled");
    });

    $('[id^=cancel_]').on('click', function () {
        document.location.reload();
    });

    $('[id^=ok_]').on('click', function () {
        username = this.id.substring('ok_'.length, this.id.length);

        userId = $('#userId_' + username).val();
        role = $('#role_' + username).val();
        productKey = $('#productKey').val();

        var data = createUserRightData(userId, role, productKey);
        $.ajax({
            type: 'POST',
            url: editUserRole,
            data: JSON.stringify(data),
            contentType: 'application/json',
            cache: false,
            async: true,
            success: function () {
                document.location.reload();
            }
        });
    });

</script>


<script>
    function getGroupStartCommand() {
        let productId = $('#encodedProductId').val();

        $.ajax({
            type: 'GET',
            url: `@Html.Raw(Url.Action(nameof(NotificationsController.CopyStartCommandForGroup), ViewConstants.NotificationsController))?ProductId=${productId}`,
            dataType: 'html',
            contentType: 'application/json',
            cache: false,
            async: true
        }).done(function (command) {
            copyToClipboard(command);
        });
    }
</script>


<script>
    function addAccessKeyButtonClick() {
        let productId = $('#encodedProductId').val();
        let newAccessKeyURL = "@Html.Raw(Url.Action(nameof(AccessKeysController.NewAccessKey), ViewConstants.AccessKeysController))";

        showNewAccessKeyModal(`${newAccessKeyURL}?Selected=${productId}&CloseModal=true`, true);
    }

    $('#accessKeys_modal').on('hidden.bs.modal', function(e) {
        document.location.reload();
    });
</script>