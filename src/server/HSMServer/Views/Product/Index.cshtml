@using HSMServer.Constants
@using HSMServer.Controllers
@using HSMServer.Helpers
@using HSMServer.Model.Authentication
@using HSMServer.Model.Folders.ViewModels
@using HSMServer.Model.ViewModel

@model List<FolderViewModel>

@{
    ViewData["Title"] = "Products";

    ViewBag.UserFolders = Model.ToDictionary(f => f.Id?.ToString() ?? string.Empty, f => (f.Name, f.Background, f.Foreground));
}


<script>
    var deleteAction = "@Html.Raw(Url.Action(ViewConstants.RemoveProductAction, ViewConstants.ProductController))";
    var editAction = "@Html.Raw(Url.Action(ViewConstants.EditProductAction, ViewConstants.ProductController))";
</script>


<div class="container">
    <div class="row w-100 justify-content-center">
        <div class="m-2">
            <div class="d-flex justify-content-between my-2">
                <h5>Products</h5>

                @if (UserRoleHelper.IsUserCRUDAllowed(Context.User as User))
                {
                    <div class='d-flex col-md-auto'>
                        <a class="mx-3" href="javascript:showAddProductModal();">
                            <i class="fa-solid fa-plus"></i> Add product
                        </a>
                        <a href="@Url.Action(nameof(FoldersController.EditFolder), ViewConstants.FoldersController)">
                            <i class="fa-solid fa-folder-plus"></i> Add folder
                        </a>
                    </div>
                }
            </div>
        </div>

        @foreach (var folder in Model)
        {
            @await Html.PartialAsync("_FolderAccordion", folder)
        }
    </div>
</div>


@await Html.PartialAsync("_AddProductModal", new AddProductViewModel())
@await Html.PartialAsync("~/Views/Shared/_DeletionConfirmationModal.cshtml")

<script>
    //copy buttons
    var clipboard = new ClipboardJS('[id^="copy_"]');

    //delete buttons
    $('[id^="delete_"]').on("click",
        function () {
            key = this.id.substring("delete_".length, this.id.length);
            name = $('#inputName_' + key).text().trim().substring(0, 100);

            showDeletionConfirmationModal(
                `Removing '${name}' product`,
                `Do you really want to remove '${name}' product?`,
                function () {
                    $.ajax({
                        type: 'GET',
                        url: deleteAction + "?Product=" + key,
                        cache: false,
                        async: true,
                        success: function () {
                            document.location.reload();
                        }
                    });
                }
            );
        });

    $('[id^=change_]').on('click', function () {
        key = this.id.substring("change_".length, this.id.length);
        window.location.href = editAction + "?Product=" + key;
    });

    $('[id^=moveTo_]').on('click', function () {
        event.preventDefault();
        event.stopImmediatePropagation();

        $.ajax({
            type: 'GET',
            url: this.href,
            cache: false,
            async: true
        }).done(function () {
            sessionStorage.setItem("productMoving", "true");
            document.location.reload();
        });
    });

    window.onload = function () {
        var productWasMoved = sessionStorage.getItem("productMoving");
        if (productWasMoved) {
            sessionStorage.removeItem("productMoving");
            showToast("Product has been succesfully moved!");
        }
    }
</script>