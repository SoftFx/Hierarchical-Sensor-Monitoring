@using HSMServer.Helpers
@using HSMServer.Model.Authentication
@using HSMServer.Constants
@using HSMServer.Extensions
@using HSMServer.Model.ViewModel
@model List<ProductViewModel>
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

@{
    var user = Context.User as User;
    bool isProductCrudAllowed = UserRoleHelper.IsUserCRUDAllowed(user);
    bool isProductActionAllowed = ProductRoleHelper.IsProductActionAllowed(user?.ProductsRoles);
}
<div class="m-2">
    <div class="row" justify-content-start>
        @if (TempData[TextConstants.TempDataErrorText] != null)
        {
            <span style="color: red;font-size: large;font-weight:normal">@TempData[TextConstants.TempDataErrorText].ToString()</span>
        }
        <div class="col-2">
            <h5 class="my-2">Products</h5>
        </div>
    </div>
</div>
@if (isProductCrudAllowed)
{
    <div class="container row my-1">
        <div class="col-4 p-0">
            <input id="createName" placeholder="New product name" type='text' class='form-control'/>
            <span class="d-none" id='new_product_name_span'></span>
        </div>
        <div class="col">
            <button id='createButton' type='button' class='btn btn-secondary ms-1' title='Add new product'>
                <i class='fas fa-plus'></i>
            </button>
        </div>
    </div>
}
<div class="col-12-xxl">
    <div class="w-100" id="productTable">
        <table class="table">
            <thead>
                <tr>
                    <th scope="col">
                        <form class="form-floating" asp-controller="Product" asp-action="Index">
                            <input placeholder="Name" id='searchProduct' type='text' class='form-control' name='searchString' value="@ViewBag.ProductName"/>
                            <label for="searchProduct" >Name</label>
                        </form>
                    </th>
                    <th scope="col">
                        <form class="form-floating" asp-controller="" asp-action="">
                            <input id="searchManager" class='form-control' type='text' placeholder="Manager"/>
                            <label for="searchManager" style="padding-bottom: 1rem" >Manager</label>
                        </form>

                    </th>
                    <th scope="col">Last update</th>
                    @if (isProductCrudAllowed || isProductActionAllowed)
                    {
                        <th scope="col" class="text-center">Actions</th>
                    }
                </tr>
            </thead>
            <tbody>
                @for (var i = 0; i < Model.Count; i++)
                {
                    var product = Model[i];
                    <tr>
                        <td class="text-break">
                            @Html.Raw(product.Name)
                        </td>
                        <td class="text-break">
                            @if (product.ManagerNames.Count == 0)
                            {
                                <span>---</span>
                            }
                            @for (int j = 0; j < product.ManagerNames.Count; j++)
                            {
                                @Html.Raw(product.ManagerNames[j].Trim(' '))
                                @if (j != product.ManagerNames.Count - 1)
                                {
                                    <span>,</span>
                                }
                            }
                        </td>
                        <td>
                            <span title="@product.LastUpdateDate">@product.ShortLastUpdateTime</span>
                            @if (product.ShortLastUpdateTime.Equals("> a month ago"))
                            {
                                <i class="fa fa-exclamation-circle key-icon-expired" title="Sensor update time is greater than 30 days"></i>
                            }
                        </td>
                        <td nowrap class="text-center">
                            <div class='btn-group'>
                                @if (isProductCrudAllowed || ProductRoleHelper.IsManager(product.Id, user?.ProductsRoles))
                                {
                                    <button class="btn" data-bs-toggle="dropdown" data-bs-auto-close="true" aria-haspopup="true" aria-expanded="false">
                                        <i class="fa-solid fa-ellipsis-vertical" style="cursor: pointer"></i>
                                    </button>
                                }
                                else
                                {
                                    <i class="fa fa-ellipsis-vertical disabled" style="color: darkgrey" data-bs-toggle="dropdown"></i>
                                }
                                <ul class='dropdown-menu overflow-auto' aria-labelledby="dropdownMenuButton">
                                    <li>
                                        <button id='change_@product.EncodedId' class='dropdown-item'>
                                            Edit
                                        </button>
                                    </li>

                                    @if (isProductCrudAllowed)
                                    {
                                        <li>
                                            <button id='delete_@product.Id' class='dropdown-item'>
                                                Delete
                                            </button>
                                        </li>
                                    }
                                </ul>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<script>
     if (window.history.replaceState) {
            window.history.replaceState( null, null, window.location.href );
        }
</script>