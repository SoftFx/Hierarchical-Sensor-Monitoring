@using HSMServer.Helpers
@using HSMServer.Model.Authentication
@using HSMServer.Constants
@using HSMServer.Model.ViewModel
@model List<ProductViewModel>
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

@{
    var user = Context.User as User;
    bool isProductCrudAllowed = UserRoleHelper.IsUserCRUDAllowed(user);
    bool isProductActionAllowed = ProductRoleHelper.IsProductActionAllowed(user?.ProductsRoles);
}

<script>
    var sorting = undefined;
</script>

<div class="m-2">
    <div class="row" justify-content-start>
        @if (TempData[TextConstants.TempDataErrorText] != null)
        {
            <span style="color: red;font-size: large;font-weight:normal">@TempData[TextConstants.TempDataErrorText].ToString()</span>
        }
        <div class="col-2">
            <h5 class="my-2">Products</h5>
        </div>
    </div>
</div>
@if (isProductCrudAllowed)
{
    <div class="container row my-1">
        <div class="col-4 p-0">
            <input id="createName" placeholder="New product name" type='text' class='form-control'/>
            <span class="d-none" id='new_product_name_span'></span>
        </div>
        <div class="col">
            <button id='createButton' type='button' class='btn btn-secondary ms-1' title='Add new product'>
                <i class='fas fa-plus'></i>
            </button>
        </div>
    </div>
}
<div class="col-12-xxl">
    <div class="w-100" id="productTable">
        <form id="formSearch" asp-controller="Product" asp-action="Index">
            <table id="formProductTable" class="table">
                <thead>
                    <tr>
                        <th scope="col">
                            <div class="form-floating">
                                <input placeholder="Name" id='searchProduct' type='text' class='form-control' name='searchProductName' value="@ViewBag.ProductName"/>
                                <label for="searchProduct">Name</label>
                            </div>
                        </th>
                        <th class="form-floating" scope="col">
                            <div class="form-floating">
                                <input id="searchManager" class='form-control' type='text' name="searchProductManager" placeholder="Manager" value="@ViewBag.ProductManager"/>
                                <label for="searchManager">Managers</label>
                            </div>
                        </th>
                        <button class="d-none"></button>
                        <th scope="col">
                            <a class="btn sortSubmit" onclick="sortTable(this, sorting)" type="submit">
                                Last update
                                <i id="sortIcon" class="fa-solid fa-sort"></i>
                            </a>
                        </th>
                        @if (isProductCrudAllowed || isProductActionAllowed)
                        {
                            <th scope="col" class="text-center">Actions</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @for (var i = 0; i < Model.Count; i++)
                    {
                        var product = Model[i];
                        <tr>
                            <td class="text-break">
                                <a id="inputName_@product.Id" asp-controller="Product" asp-action="EditProduct" asp-route-Product="@product.EncodedId">
                                    @Html.Raw(product.Name)
                                </a>
                            </td>
                            <td class="text-break">
                                @if (product.Managers.Count == 0)
                                {
                                    <span>---</span>
                                }
                                @for (int j = 0; j < product.Managers.Count; j++)
                                {
                                    @Html.Raw(product.Managers[j].Trim(' '))
                                    @if (j != product.Managers.Count - 1)
                                    {
                                        <span>,</span>
                                    }
                                }
                            </td>
                            <td>
                                <span title="@product.LastUpdateDate">@product.ShortLastUpdateTime</span>
                                @if (product.ShortLastUpdateTime.Equals("> a month ago") || product.ShortLastUpdateTime.Equals(" - no data"))
                                {
                                    <span title="Sensor update time is greater than 30 days">
                                        <svg height="64px" width="64px" version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 191.812 191.812" xml:space="preserve" fill="#ffffff" stroke="#ffffff">
                                            <g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g>
                                            <g id="SVGRepo_iconCarrier">
                                                <g>
                                                    <path style="fill:#ffc107;" d="M95.906,121.003c6.903,0,12.5-5.597,12.5-12.5V51.511c0-6.904-5.597-12.5-12.5-12.5 s-12.5,5.596-12.5,12.5v56.993C83.406,115.407,89.003,121.003,95.906,121.003z"></path> <path style="fill:#ffc107;" d="M95.909,127.807c-3.29,0-6.521,1.33-8.841,3.66c-2.329,2.32-3.659,5.54-3.659,8.83 s1.33,6.52,3.659,8.84c2.32,2.33,5.551,3.66,8.841,3.66s6.51-1.33,8.84-3.66c2.319-2.32,3.66-5.55,3.66-8.84s-1.341-6.51-3.66-8.83 C102.419,129.137,99.199,127.807,95.909,127.807z"></path> <path style="fill:#ffc107;" d="M95.906,0C43.024,0,0,43.023,0,95.906s43.023,95.906,95.906,95.906s95.905-43.023,95.905-95.906 S148.789,0,95.906,0z M95.906,176.812C51.294,176.812,15,140.518,15,95.906S51.294,15,95.906,15 c44.611,0,80.905,36.294,80.905,80.906S140.518,176.812,95.906,176.812z"></path>
                                                </g>
                                            </g>
                                        </svg>
                                    </span>
                                }
                            </td>
                            <td nowrap class="text-center">
                                <div class='btn-group'>
                                    @if (isProductCrudAllowed || ProductRoleHelper.IsManager(product.Id, user?.ProductsRoles))
                                    {
                                        <button id="actionButton" class="btn" data-bs-toggle="dropdown" data-bs-auto-close="true" aria-haspopup="true" aria-expanded="false">
                                            <i class="fa-solid fa-ellipsis-vertical" style="cursor: pointer"></i>
                                        </button>
                                    }
                                    else
                                    {
                                        <i class="fa fa-ellipsis-vertical disabled" style="color: darkgrey" data-bs-toggle="dropdown"></i>
                                    }
                                    <ul class='dropdown-menu overflow-auto' aria-labelledby="dropdownMenuButton">
                                        <li>

                                            <a id='change_@product.EncodedId' class='dropdown-item' style="cursor: pointer;">
                                                Edit
                                            </a>
                                        </li>
                                        @if (isProductCrudAllowed)
                                        {
                                            <li>
                                                <a id='delete_@product.Id' class='dropdown-item' style="cursor: pointer;">
                                                    Delete
                                                </a>
                                            </li>
                                        }
                                    </ul>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </form>
    </div>
</div>

<script>
     if (window.history.replaceState) {
            window.history.replaceState( null, null, window.location.href );
        }
     
     function sortTable(test, asc) {
        var table, rows, switching, i, x, y, shouldSwitch;
        table = document.getElementById("formProductTable");
        switching = true;
       
        while (switching) {
        
          switching = false;
          rows = table.rows;
         
          for (i = 1; i < (rows.length - 1); i++) {
          
            shouldSwitch = false;
          
            x = rows[i].getElementsByTagName("TD")[2];
            y = rows[i + 1].getElementsByTagName("TD")[2];
           
            let xdate = (new Date(x.getElementsByTagName('span')[0].attributes[0].value)).getTime()
            let ydate =(new Date(y.getElementsByTagName('span')[0].attributes[0].value)).getTime()
           
            if (asc === true){
                 if (xdate > ydate) {
                    shouldSwitch = true;
                    break;
                 }
            }
            else{
                if (xdate < ydate) {
                   shouldSwitch = true;
                   break;
                }
            }
          
          }
          if (shouldSwitch) {
            rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
            switching = true;
          }
       }
       if (sorting === undefined){
           sorting = false
       }
       sorting = !sorting;
       
       var icon = test.querySelector("svg");
       if (sorting){
         icon.classList.toggle('fa-sort-up');
       }else icon.classList.toggle('fa-sort-down');
       
    
     }
</script>