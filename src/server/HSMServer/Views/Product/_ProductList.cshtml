@using HSMServer.Helpers
@using HSMServer.Model.Authentication
@using HSMServer.Extensions
@using HSMServer.Model.Folders.ViewModels
@using HSMServer.Model.ViewModel
@using HSMServer.Constants
@using HSMServer.Controllers

@model FolderViewModel

@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

@{
    var user = Context.User as User;
    bool isProductCrudAllowed = UserRoleHelper.IsUserCRUDAllowed(user);
    bool isProductActionAllowed = ProductRoleHelper.IsProductActionAllowed(user?.ProductsRoles);
}


@if (Model.Products.Count > 0 || !string.IsNullOrEmpty(ViewBag.ProductName) || !string.IsNullOrEmpty(ViewBag.ProductManager))
{
    <div class="w-100 productTable">
        <form id="folderProductsForm_@Model.Id" asp-controller="@ViewConstants.ProductController" asp-action="@nameof(ProductController.FilterFolderProducts)">
            <input class='d-none' name='folderId' value="@Model.Id" />
            <table id="folderProductsTable_@Model.Id" class="table table-striped">
                <thead>
                    <tr>
                        <th>
                            <div class="form-floating m-0 p-0">
                                <input placeholder="Name" id='searchProduct' type='text' class='form-control' name='productName' value="@ViewBag.ProductName"/>
                                <label for="searchProduct">Name</label>
                            </div>
                        </th>
                        <th>
                            <div class="form-floating m-0 p-0">
                                <input id="searchManager" class='form-control' type='text' name="productManager" placeholder="Manager" value="@ViewBag.ProductManager"/>
                                <label for="searchManager">Managers</label>
                            </div>
                        </th>
                        <button class="d-none"></button>
                        <th>
                            <a class="btn sortSubmit" onclick="sortTable(this, 2, '@Model.Id')" type="submit">
                                Last update
                                <i id="sortIcon" class="fa-solid fa-sort"></i>
                            </a>
                        </th>
                        @if (isProductCrudAllowed || isProductActionAllowed)
                        {
                            <th class="text-center">Actions</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (var product in Model.Products)
                    {
                        <tr>
                            <td class="text-break">
                                @if (user.IsManager(product.Id))
                                {
                                    <a class="productName_anchor" id="inputName_@product.Id" asp-controller="Product" asp-action="EditProduct" asp-route-Product="@product.EncodedId">
                                        @Html.Raw(product.Name)
                                    </a>
                                }
                                else
                                {
                                    @Html.Raw(product.Name)
                                }
                            </td>
                            <td class="text-break">
                                @if (product.Managers.Count == 0)
                                {
                                    <span>---</span>
                                }
                                else
                                {
                                    var managers = string.Join(", ", product.Managers);
                                    <span>@Html.Raw(managers)</span>
                                }
                            </td>
                            <td>
                                <span title="@product.LastUpdateDate.ToDefaultFormat()" time="@product.LastUpdateDate">
                                    @product.ShortLastUpdateTime
                                </span>
                                @if (product.ProductUpdateIsExpired)
                                {
                                    <span>
                                        <img title="Product sensor(s) haven't been updated for @ProductViewModel.ProductExpiredTime.ToTableView()" src="~/dist/warning.svg" id="svg_exclamation" alt="warning icon"/>
                                    </span>
                                }
                            </td>
                            <td nowrap class="text-center w-10">
                                <div class="dropdown">
                                    @if (isProductCrudAllowed || ProductRoleHelper.IsManager(product.Id, user?.ProductsRoles))
                                    {
                                        <button id="actionButton" class="btn" data-bs-toggle="dropdown" data-bs-auto-close="true" aria-haspopup="true" aria-expanded="false">
                                            <i class="fa-solid fa-ellipsis-vertical button-link"></i>
                                        </button>
                                    }
                                    else
                                    {
                                        <i class="fa fa-ellipsis-vertical disabled" style="color: darkgrey" data-bs-toggle="dropdown"></i>
                                    }
                                    <div class="dropdown-menu" aria-labelledby="actionButton">
                                        <a id='change_@(Model.Id)_@product.EncodedId' class="dropdown-item text-decoration-none fw-normal button-link">Edit</a>
                                        @if (isProductCrudAllowed)
                                        {
                                            <a id='delete_@(Model.Id)_@product.Id' class="dropdown-item text-decoration-none fw-normal button-link">Delete</a>
                                        }
                                        @if (ViewBag.UserFolders is Dictionary<string, string> folders && folders.Count > 1)
                                        {
                                            var currentFolderId = Model.Id?.ToString() ?? string.Empty;

                                            <div class="dropdown dropend">
                                                <a class="dropdown-item text-decoration-none fw-normal button-link" id="moveToAction" data-bs-toggle="dropdown" data-bs-auto-close="true" aria-haspopup="true" aria-expanded="false">Move to ...</a>
                                                <div class="dropdown-menu" aria-labelledby="moveToAction">
                                                    @foreach (var (id, name) in folders)
                                                    {
                                                        @if (id != currentFolderId)
                                                        {
                                                            <a id="moveTo_@(Model.Id)_@id" class="dropdown-item text-decoration-none fw-normal button-link"
                                                               asp-controller="@ViewConstants.ProductController" asp-action="@nameof(ProductController.MoveProduct)"
                                                               asp-route-productId="@product.Id" asp-route-toFolderId="@id" asp-route-fromFolderId="@Model.Id">
                                                                @name
                                                            </a>
                                                        }
                                                    }
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </form>
    </div>
}


<script>
    if (window.history.replaceState) {
        window.history.replaceState(null, null, window.location.href );
    }

    $(document).on("submit", "[id^=folderProductsForm_@Model.Id]", function (event) {
        event.preventDefault();
        event.stopImmediatePropagation();

        let folderId = this.id.substring('folderProductsForm_'.length, this.id.length);

        $.ajax({
            url: $(`#folderProductsForm_${folderId}`).attr("action"),
            type: 'POST',
            data: $(`#folderProductsForm_${folderId}`).serialize(),
            datatype: 'json',
            async: true,
            success: (viewData) => {
                $(`#accordionBody_${folderId}`).html(viewData);
            }
        });
    });

    (function ($bs) {
        const CLASS_NAME = 'has-child-dropdown-show';
        $bs.Dropdown.prototype.toggle = function (_orginal) {
            return function () {
                document.querySelectorAll('.' + CLASS_NAME).forEach(function (e) {
                    e.classList.remove(CLASS_NAME);
                });
                let dd = this._element.closest('.dropdown').parentNode.closest('.dropdown');
                for (; dd && dd !== document; dd = dd.parentNode.closest('.dropdown')) {
                    dd.classList.add(CLASS_NAME);
                }
                return _orginal.call(this);
            }
        }($bs.Dropdown.prototype.toggle);

        document.querySelectorAll('.dropdown').forEach(function (dd) {
            dd.addEventListener('hide.bs.dropdown', function (e) {
                if (this.classList.contains(CLASS_NAME)) {
                    this.classList.remove(CLASS_NAME);
                    e.preventDefault();
                }
                e.stopPropagation(); // do not need pop in multi level mode
            });
        });
    })(bootstrap);
</script>

<script>
    //delete buttons
    $('[id^="delete_@(Model.Id)_"]').on("click",
        function () {
            key = this.id.substring("delete_@(Model.Id)_".length, this.id.length);
            name = $('#inputName_' + key).text().trim().substring(0, 100);

            showConfirmationModal(
                `Removing '${name}' product`,
                `Do you really want to remove '${name}' product?`,
                function () {
                    $.ajax({
                        type: 'GET',
                        url: deleteAction + "?Product=" + key,
                        cache: false,
                        async: true,
                        success: function () {
                            document.location.reload();
                        }
                    });
                }
            );
        });

    $('[id^=change_@(Model.Id)_]').on('click', function () {
        key = this.id.substring("change_@(Model.Id)_".length, this.id.length);
        window.location.href = editAction + "?Product=" + key;
    });

    $('[id^=moveTo_@(Model.Id)_]').on('click', function () {
        event.preventDefault();
        event.stopImmediatePropagation();

        $.ajax({
            type: 'GET',
            url: this.href,
            cache: false,
            async: true
        }).done(function () {
            sessionStorage.setItem("productMoving", "true");
            document.location.reload();
        });
    });

    window.onload = function () {
        var productWasMoved = sessionStorage.getItem("productMoving");
        if (productWasMoved) {
            sessionStorage.removeItem("productMoving");
            showToast("Product has been succesfully moved!");
        }
    }
</script>
