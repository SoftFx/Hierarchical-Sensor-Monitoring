@using HSMServer.Model.AccessKeysViewModels
@using HSMServer.Controllers
@using HSMServer.Constants
@using HSMServer.Core.Helpers
@using HSMServer.Core.Model
@using HSMServer.Core.Model.Authentication
@using HSMServer.Extensions

@model List<AccessKeyViewModel>

@{
    var user = User as User;
}

@foreach (var key in Model)
{
    <tr id="row_@key.Id">
        @if (key.HasProductColumn)
        {
            <td class="text-break">
                @if (key.ParentProduct.Parent == null && key.ParentProduct.IsChangingAccessKeysAvailable(user))
                {
                    <a asp-controller="@ViewConstants.ProductController" asp-action="@nameof(ProductController.EditProduct)" asp-route-encodedProductId="@key.ParentProduct.EncodedId">
                        @Html.Raw(key.NodePath)
                    </a>
                }
                else
                {
                    @Html.Raw(key.NodePath)
                }
            </td>
            <td class="displayName" nowrap>@Html.Raw(key.DisplayName)</td>
            <td nowrap>
                <a role="button" tabindex="0" id="copy_@key.Id" data-clipboard-text="@key.Id" title="copy key" class="link-primary">copy</a>
            </td>
            <td>@key.Permissions</td>
            <td>@key.AuthorName</td>
            <td class="text-center">
                <i class='@key.State.ToIcon()' title="@key.StatusTitle"></i>
            </td>
            @if (key.ParentProduct.IsChangingAccessKeysAvailable(user))
            {
                <td nowrap class="text-center">
                    <div class='btn-group'>
                        <i class="fa-solid fa-ellipsis-vertical" data-bs-toggle="dropdown"></i>
                        <div class='dropdown-menu'>
                            <button id='changeAccessKey_@key.Id' class='dropdown-item'>Edit</button>
                            <button id='blockAccessKey_@key.Id' class='dropdown-item'>
                                @if (key.State == KeyState.Blocked)
                                {
                                    <span>Unblock</span>
                                }
                                else
                                {
                                    <span>Block</span>
                                }
                            </button>
                            <button id='deleteAccessKey_@key.Id' class='dropdown-item'>Remove</button>
                        </div>
                    </div>
                </td>
            }
        }
        else
        {
            <td id="displayName_@key.DisplayName" nowrap>@Html.Raw(key.DisplayName)</td>
            @if (key.ParentProduct.IsChangingAccessKeysAvailable(user))
            {
                <td nowrap>
                    @key.Id
                </td>
            }
            <td nowrap>
                <a role="button" tabindex="0" id="copy_@key.Id" data-clipboard-text="@key.Id" title="copy key" class="link-primary">copy</a>
            </td>
            <td>@key.Permissions</td>
            <td class="text-center">
                <i class='@key.State.ToIcon()' title="@key.StatusTitle"></i>
            </td>
            @if (key.ParentProduct.IsChangingAccessKeysAvailable(user))
            {
                <td nowrap>
                    @key.Id
                </td>
            }
        }
    </tr>
}

@await Html.PartialAsync("~/Views/Shared/_DeletionConfirmationModal.cshtml")

<script src="~/js/bundles/accessKey.min.js"></script>

<script>
    var changeAccessKeyAction = "@Html.Raw(Url.Action(nameof(AccessKeysController.ModifyAccessKey), ViewConstants.AccessKeysController))";
    $('[id^="changeAccessKey_"]').off("click").on("click",
        function () {
            const selectedKeyId = this.id.substring("changeAccessKey_".length, this.id.length);
            changeAccessKey(changeAccessKeyAction, selectedKeyId)
        });
   
    $('[id^="deleteAccessKey_"]').off("click").on("click",
        function () {
            const selectedKeyId = this.id.substring("deleteAccessKey_".length, this.id.length);
            const displayName = document.getElementById(`row_${selectedKeyId}`).getElementsByClassName("displayName")[0].textContent;
            const isAllAccessKeysTable = document.getElementById('accessKeys_productColumn');
                       
            let url;
            if (isAllAccessKeysTable != undefined) {
                let isAllProducts = false;  // false while checkbox id=allProducts is not visible (AccessKeys/Index.cshtml)
        
                url = `@Html.Raw(Url.Action(nameof(AccessKeysController.RemoveAccessKeyFromAllTable), ViewConstants.AccessKeysController))?SelectedKey=${selectedKeyId}&AllProducts=${isAllProducts.checked}`;
            } else url = `@Html.Raw(Url.Action(nameof(AccessKeysController.RemoveAccessKeyFromProductTable), ViewConstants.AccessKeysController))?SelectedKey=${selectedKeyId}`;
     
            deleteAccessKey(url, selectedKeyId, displayName)
        });
    
    $('[id^="blockAccessKey_"]').off("click").on("click",
        function () {
             const selectedKeyId = this.id.substring("blockAccessKey_".length, this.id.length);
             const isAllAccessKeysTable = document.getElementById('accessKeys_productColumn');
             
             let url;
             if (isAllAccessKeysTable != undefined) {
                 let isAllProducts = false;  // false while checkbox id=allProducts is not visible (AccessKeys/Index.cshtml)
                     
                  url = `@Html.Raw(Url.Action(nameof(AccessKeysController.BlockAccessKeyFromAllTable), ViewConstants.AccessKeysController))?SelectedKey=${selectedKeyId}&AllProducts=${isAllProducts.checked}`;
             } 
             else url = `@Html.Raw(Url.Action(nameof(AccessKeysController.BlockAccessKeyFromProductTable), ViewConstants.AccessKeysController))?SelectedKey=${selectedKeyId}`;
              
             blockAccessKey(url, selectedKeyId)
        }); 
    function qwe(){
        }
</script>