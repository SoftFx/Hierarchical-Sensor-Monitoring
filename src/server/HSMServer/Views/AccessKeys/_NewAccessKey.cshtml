@using HSMServer.Model.AccessKeysViewModels
@using HSMServer.Constants
@using HSMServer.Controllers

@model EditAccessKeyViewModel

@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers


<form asp-controller="@ViewConstants.AccessKeysController"
      asp-action="@(Model.IsModify ? nameof(AccessKeysController.ModifyAccessKey) : nameof(AccessKeysController.NewAccessKey))"
      method="post" id="newEditAccessKey_form">

    <input id='accessKeyId' style='display: none' asp-for="Id" value="@Model.Id"/>
    @if (Model.ReturnType is not AccessKeyReturnType.Table)
    {
        <input id="selectedProductId" style='display: none' asp-for="SelectedProductId" value="@Model.SelectedProductId"/>
    }
    <input id='whetherCloseModal' style='display: none' asp-for="CloseModal" value="@Model.CloseModal"/>
    <input id='returnType' style='display: none' asp-for="ReturnType" value="@Model.ReturnType"/>
    <input style='display: none' asp-for="IsModify" value="@Model.IsModify"/>
    <input style='display: none' asp-for="ExpirationTime" value="@Model.ExpirationTime"/>
    <input style='display: none' asp-for="ProductsItems" value="@Model.ProductsItems"/>
    <div class="row">
        <div class="form-group col-4">
            <label asp-for="SelectedProductId" class="col-form-label"></label>
            @if (Model.ProductsItems.Count == 1)
            {
                <select asp-for="SelectedProductId" asp-items="@Model.ProductsItems" disabled class="form-control form-select">
                    <option value="@Guid.Empty">All products</option>
                </select>
            }
            else
            {
                <select asp-for="SelectedProductId" asp-items="@Model.ProductsItems" class="form-control form-select">
                    <option value="@Guid.Empty">All products</option>
                </select>
            }
        </div>
    </div>
    <div class="row">
        <div class="form-group col-8">
            <label asp-for="DisplayName" class="col-form-label"></label>
            <input type="text" asp-for="DisplayName" class="form-control"/>
            <span asp-validation-for="DisplayName"></span>
        </div>

        <div class="form-group col-4">
            <label asp-for="Expiration" class="col-form-label"></label>
            @if (Model.IsModify)
            {
                <input type="text" value="@Model.ExpirationTime" class="form-control" disabled/>
            }
            else
            {
                <select asp-for="Expiration" asp-items="Html.GetEnumSelectList<AccessKeyExpiration>()" class="form-control form-select"></select>
            }
        </div>
    </div>

    <div class="form-group row mt-2">
        <label class="col-auto col-form-label" asp-for="Permissions"></label>
        <button id="checkboxButton" class="col-auto btn btn-light btn-sm" type="button" style="width: 6rem">Select all</button>
    </div>
    <span asp-validation-for="Permissions"></span>

    <div class="form-group" onchange="onChangeCheckBoxes()" id="permissions">
        <div class="form-check form-check-inline">
            <input class="form-check-input" type="checkbox" asp-for="CanSendSensorData">
            <label class="form-check-label" asp-for="CanSendSensorData"></label>
        </div>
        <div class="form-check form-check-inline">
            <input class="form-check-input" type="checkbox" asp-for="CanAddNodes">
            <label class="form-check-label" asp-for="CanAddNodes"></label>
        </div>
        <div class="form-check form-check-inline">
            <input class="form-check-input" type="checkbox" asp-for="CanAddSensors">
            <label class="form-check-label" asp-for="CanAddSensors"></label>
        </div>
        <div class="form-check form-check-inline">
            <input class="form-check-input" type="checkbox" asp-for="CanReadSensorData">
            <label class="form-check-label" asp-for="CanReadSensorData"></label>
        </div>
    </div>

    <div class="form-group">
        <div align="right">
            <button class="btn btn-secondary col-xl-1 col-2" type="submit">Save</button>
            <button id="cancelButton" class="btn btn-secondary col-xl-1 col-2" type="button" onclick="cancelButtonClick()">Cancel</button>
        </div>
    </div>
</form>

<script>
    $(document).ready(function () {
        onChangeCheckBoxes();
    })

    $(document).on("submit", "#newEditAccessKey_form", function (event) {
        event.preventDefault();
        event.stopImmediatePropagation();

        let whetherCloseModal;
        $.ajax({
            url: $("#newEditAccessKey_form").attr("action"),
            type: 'POST',
            data: new FormData(this),
            datatype: 'html',
            processData: false,
            contentType: false,
            cache: false,
            async: true,
            success: function (viewData) {
                whetherCloseModal = $('#whetherCloseModal').val();

                setModalBody(viewData);
            }
        }).done(function () {
            if ($("#newEditAccessKey_form .field-validation-error").length === 0) {
                closeModalOrShowAccessKeysList(whetherCloseModal, function () {
                    showAccessKeysListModal();
                });
            }
        });
    });

    function onChangeCheckBoxes(){
        let i = 0;
        $('#permissions :checkbox').each(function () {
            if (this.checked === true)
                i++;
        });
        
        if (i === $('#permissions :checkbox').length) 
            initUnselectAll()
        else
            initSelectAll()
    }
    
    function initSelectAll() {
        $('#checkboxButton').off('click').on('click', selectAllCheckBoxes).html('Select all');    
    }
    
    function initUnselectAll() {
        $('#checkboxButton').off('click').on('click', unSelectAllCheckBoxes).html('Unselect all');       
    }
    
    function cancelButtonClick() {
        closeModalOrShowAccessKeysList($('#whetherCloseModal').val(), function () {
            let id = $('#accessKey_prodcutId').val() === undefined ? $('#selectedProductId').val() : $('#accessKey_prodcutId').val()
            showAccessKeysList(id, false);
        });
    }

    function selectAllCheckBoxes() {
        $('#permissions :checkbox').each(function () {
            this.checked = true;
        });
        
        $('#checkboxButton').off('click').on('click', unSelectAllCheckBoxes).html('Unselect all');
    }
    
    function unSelectAllCheckBoxes(){
        $('#permissions :checkbox').each(function () {
            this.checked = false;
        });
        
        $('#checkboxButton').off('click').on('click', selectAllCheckBoxes).html('Select all');
    }

    function closeModalOrShowAccessKeysList(whetherCloseModal, showAccessKeys) {
        if (whetherCloseModal === "True") {
            hideModal();
        }
        else {
            showAccessKeys();
        }
    }
</script>