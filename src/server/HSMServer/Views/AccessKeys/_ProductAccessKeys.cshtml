@using HSMServer.Model.TreeViewModels
@using HSMServer.Controllers
@using HSMServer.Constants
@using HSMServer.Core.Model.Authentication
@using HSMServer.Extensions

@model ProductNodeViewModel


@{
    var user = User as User;
}

<link rel="stylesheet" href="~/css/bundles/accessKeyBundle.min.css"/>
<script src="~/js/clipboard.js/clipboard.min.js"></script>


@await Html.PartialAsync("~/Views/Shared/_DeletionConfirmationModal.cshtml")
<script src="~/js/bundles/accessKey.min.js"></script>

<input id='accessKey_prodcutId' style='display: none' value="@Model.EncodedId"/>
<input id='accessKey_productName' style='display: none' value="@Model.Name"/>

<table class="table">
    <tr>
        <th>Key</th>
        <th></th>
        <th>Display name</th>
        <th>Permissions</th>
        <th>State</th>
        <th>Actions</th>
    </tr>
    <tbody id="accessKeysTable">
    @await Html.PartialAsync("_AllAccessKeys", Model.GetEditProductAccessKeys())

    </tbody>
</table>

<div align="right">
    @if (Model.IsChangingAccessKeysAvailable(User as User))
    {
        <button class="btn btn-secondary" onclick="addButtonClick()">Add</button>
    }
    <button class="btn btn-secondary" onclick="hideModal()">Close</button>
</div>


<script>
    var clipboardCopy = new ClipboardJS('[id^="copy_"]', {
        container: document.getElementById('accessKeys_modal')
    });

    function addButtonClick() {
        let productId = $('#accessKey_prodcutId').val();
        let newAccessKeyURL = "@Html.Raw(Url.Action(nameof(AccessKeysController.NewAccessKey), ViewConstants.AccessKeysController))";

        showNewAccessKeyModal(`${newAccessKeyURL}?Selected=${productId}`, false);
    }
    
     var changeAccessKeyAction = "@Html.Raw(Url.Action(nameof(AccessKeysController.ModifyAccessKey), ViewConstants.AccessKeysController))";
        $('[id^="changeAccessKey_"]').off("click").on("click",
            function () {
                let selectedKeyId = this.id.substring("changeAccessKey_".length, this.id.length);
                changeAccessKey(changeAccessKeyAction, selectedKeyId)
            });
    
        $('[id^="deleteAccessKey_"]').off("click").on("click",
            function () {
                let selectedKeyId = this.id.substring("deleteAccessKey_".length, this.id.length);
                         
                let isAllAccessKeysTable = document.getElementById('accessKeys_productColumn');
                let url;
                if (isAllAccessKeysTable != undefined) {
                     let isAllProducts = false;  // false while checkbox id=allProducts is not visible (AccessKeys/Index.cshtml)
                    
                     url = `@Html.Raw(Url.Action(nameof(AccessKeysController.RemoveAccessKeyFromAllTable), ViewConstants.AccessKeysController))?SelectedKey=${selectedKeyId}&AllProducts=${isAllProducts.checked}`;
                     }
                    else {
                       url = `@Html.Raw(Url.Action(nameof(AccessKeysController.RemoveAccessKeyFromProductTable), ViewConstants.AccessKeysController))?SelectedKey=${selectedKeyId}`;
                        }    
                deleteAccessKey(url, selectedKeyId)
            });
        
        $('[id^="blockAccessKey_"]').off("click").on("click",
            function () {
                 let selectedKeyId = this.id.substring("blockAccessKey_".length, this.id.length);
                  let isAllAccessKeysTable = document.getElementById('accessKeys_productColumn');
                                          let url;
                                          if (isAllAccessKeysTable != undefined) {
                                              let isAllProducts = false;  // false while checkbox id=allProducts is not visible (AccessKeys/Index.cshtml)
                                      
                                              url = `@Html.Raw(Url.Action(nameof(AccessKeysController.BlockAccessKeyFromAllTAble), ViewConstants.AccessKeysController))?SelectedKey=${selectedKeyId}&AllProducts=${isAllProducts.checked}`;
                                          } else {
                                              url = `@Html.Raw(Url.Action(nameof(AccessKeysController.BlockAccessKeyFromProductTable), ViewConstants.AccessKeysController))?SelectedKey=${selectedKeyId}`;
                                          }
                 blockAccessKey(url, selectedKeyId)
            });
</script>