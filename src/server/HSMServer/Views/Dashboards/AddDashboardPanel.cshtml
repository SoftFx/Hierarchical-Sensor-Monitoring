@using HSMServer.Controllers
@using System.Text.Json;
@using System.Text.Json.Serialization

@model HSMServer.Model.Dashboards.PanelViewModel

@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

@{
    ViewData["Title"] = "Dashboard";
    Layout = "~/Views/Tree/_Layout.cshtml";
}


<div class="w-100 overflow-y-auto p-2">
    <div id="panelSettings" class="my-2">
        <div id="editablePanelSettings" class="my-2">
            <form method="post"  asp-action="@nameof(DashboardsController.SaveDashboardPanel)" asp-route-dashboardId="@Model.DashboardId" asp-route-panelId="@Model.Id">
                <div class="d-flex justify-content-between mb-1">
                    <div class="d-flex align-items-center flex-grow-1">
                        <label asp-for="Name" class="me-2"></label>
                        <input class="form-control" required maxlength="30" asp-for="Name" placeholder="@nameof(Model.Name)"/>
                    </div>

                    <button type="submit" class="btn btn-primary independentSizeButton ms-2">Save</button>
                </div>

                <textarea id='description' maxlength="250" class="form-control w-100" type='text' asp-for="Description" placeholder="@nameof(Model.Description)"></textarea>

                <div class="form-check mt-2">
                    <input type="checkbox" asp-for="ShowProduct" class="form-check-input" onchange="javascript:showProductInLabels()" />
                    <label class="form-check-label" asp-for="ShowProduct"></label>
                </div>
            </form>
        </div>
    </div>

    <div class="dropzone" style="max-width: 98%;min-width: 100%; width: 100%!important;">
        <span id="emptypanel" style="font-size: larger; position: fixed; z-index: 300; transform: translate(100px, 100px); color: rgb(128,128,128); display: none">Empty panel</span>
        <div id="multichart"></div>
    </div>

    <div id="plots" class="mt-1">
        <ul id="sources" class="list-group">
        </ul>
    </div>

    <div class="d-flex justify-content-center mt-2" style="color: grey; font-size: larger">
        <span>Drag and drop sensor to the plot above</span>
    </div>
</div>


<script>
    $(document).ready(function () {
        let values = @Html.Raw(JsonSerializer.Serialize(Model.Sources.Values, new JsonSerializerOptions()
                     {
                         PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
                         NumberHandling = JsonNumberHandling.AllowNamedFloatingPointLiterals
                     }))
        initMultichart('multichart', 300, true, true).then(
            (dom) => {
                values.forEach(function (x) {
                    addNewSourceHtml(x, 'multichart');
                })

                $('#multichart').on('plotly_relayout', function (e, updateData){
                    let rect = e.target.getBoundingClientRect();
                    let emptypanel = $('#emptypanel');
                    emptypanel.css('transform', `translate(${rect.width / 2 - emptypanel .width() / 2}px, ${rect.height / 2}px)`)
                })

                if (values.length === 0) {
                    $('#emptypanel').show();
                }

                window.dispatchEvent(new Event('resize'));
            }
        );

        $('#editablePanelSettings form').on('submit', function (event){
            event.preventDefault();
            event.stopImmediatePropagation();

            $.ajax({
                type: 'post',
                url: $(this).attr("action"),
                data: new FormData(this),
                datatype: 'html',
                processData: false,
                contentType: false,
                cache: false,
                async: true
            }).done(function(id){
                window.location.href = `/Dashboards/${id}`;
            }).fail(function (response){
                showToast(response.responseText);
            })
        })
    })
    
    $('#multichart').on('plotly_legendclick', function (data){
        return false;
    })

    function showProductInLabels() {
        $('#sources li').each(function (idx, li) {
            let source = $(li);

            let idAttr = source.attr('id');
            let sourceId = idAttr.substring('source_'.length, idAttr.length);

            if ($(`input[name='ShowProduct']`).is(':checked'))
                $(`#productName_${sourceId}`).removeClass('d-none');
            else
                $(`#productName_${sourceId}`).addClass('d-none');

            realtimeUpdate(sourceId);
        });
    }
</script>