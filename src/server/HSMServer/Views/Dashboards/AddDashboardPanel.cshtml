@using HSMServer.Controllers
@using System.Text.Json
@using HSMServer.JsonConverters
@using Microsoft.AspNetCore.Mvc.TagHelpers

@model HSMServer.Model.Dashboards.PanelViewModel

@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

@{
    ViewData["Title"] = "Dashboard";
    Layout = "~/Views/Tree/_Layout.cshtml";
    var jsonOptions = new JsonSerializerOptions()
    {
        PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
        Converters = {new PlotlyDoubleConverter(), new VersionSourceConverter()}
    };

    var isYRangeAvailabe = !Model.MainSensorType.HasValue || Model.YRange.IsRangeScalePossible(Model.MainSensorType.Value);
}


<div class="w-100 overflow-y-auto p-2">
    <div id="panelSettings" class="my-2">
        <div id="editablePanelSettings" class="my-2">
            <form method="post" asp-action="@nameof(DashboardsController.SaveDashboardPanel)" asp-route-dashboardId="@Model.DashboardId" asp-route-panelId="@Model.Id">
                <div class="d-flex justify-content-between mb-1">
                    <div class="d-flex align-items-center flex-grow-1">
                        <label asp-for="Name" class="me-2"></label>
                        <input class="form-control" required maxlength="30" asp-for="Name" placeholder="@nameof(Model.Name)"/>
                    </div>

                    <button type="submit" class="btn btn-primary independentSizeButton ms-2">Save</button>
                </div>

                <textarea id='description' maxlength="250" class="form-control w-100" type='text' asp-for="Description" placeholder="@nameof(Model.Description)"></textarea>

                <div class="d-flex">
                    <div id="y-range-settings" class="form-control w-auto no-border align-items-center" style="display: flex">
                        <div id="autoscale-range" class="d-flex no-border align-items-center @(Model.YRange.AutoScale ? "disabled-group" : "")">
                            <span>Y axis settings:</span>

                            <label class="form-check-label w-auto ms-2" asp-for="YRange.MinValue"></label>
                            <input type="number" step="any" asp-for="YRange.MinValue" class="form-control form-control-sm ms-1" style="flex: 0 0 content; max-width: 7rem"/>

                            <label class="form-check-label w-auto ms-2" asp-for="YRange.MaxValue"></label>
                            <input type="number" step="any" asp-for="YRange.MaxValue" class="form-control form-control-sm ms-1" style="flex: 0 0 content; max-width: 7rem"/>
                        </div>

                        <input id="autoscale" class="form-check-input my-0 mx-1" asp-for="YRange.AutoScale" type="checkbox"/>
                        <label class="form-check-label" asp-for="YRange.AutoScale"></label>
                    </div>
                    <div class="d-flex flex-row align-items-center justify-content-end mt-2 flex-grow-1">
                        <div class="form-check">
                            <input type="checkbox" asp-for="AggregateValues" class="form-check-input"/>
                            <label class="form-check-label" asp-for="AggregateValues"></label>
                        </div>
                        <i class='fas fa-question-circle ms-1' title='If the setting is checked, the requested period will be divided into 100 equal sections and an aggregate point will be created for each subsection. The aggregation function depends on the source property. If source property is Min then aggregation function is Min(el1, el2). For source properties Max and Count the aggregation function is Max(el1, el2) and for Mean, Value and EMA (all) the function is Mean(el1, el2).'></i>

                        <div class="form-check ms-4">
                            <input type="checkbox" asp-for="ShowProduct" class="form-check-input" onchange="javascript:showProductInLabels()"/>
                            <label class="form-check-label" asp-for="ShowProduct"></label>
                        </div>
                        <div class="form-check ms-4">
                            <input type="checkbox" asp-for="ShowProperties" class="form-check-input" onchange="javascript:showProperiesInLabels()"/>
                            <label class="form-check-label" asp-for="ShowProperties"></label>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>

    <div class="dropzone" style="max-width: 98%; min-width: 100%; width: 100%!important; position: relative;">
        <span id="emptypanel" style="font-size: larger; z-index: 300; color: rgb(128,128,128); display: none; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis; text-align: center;">Empty panel</span>
        <div id="multichart"></div>
    </div>


    <div class="d-flex align-items-center">
        <label class="col-form-label fw-bold">Templates:</label>
        <i class='fas fa-question-circle mx-2' title="Templates provide the ability to connect several sources with the same path template at once.&#013;Path input supports 2 types of variables that help to create sensor path templates. The variable supports letters, digits and symbols '_', '.', '$'.&#013;&#013;Variables:&#013;* - unnamed;&#013;{piece} - named (can be used in Label input)."></i>
        <a href="javascript:addTemplate();" class="mx-2">
            <i class="fa-solid fa-plus"></i> Add
        </a>
    </div>
    <div id="templates">
        @foreach (var (_, template) in Model.Templates)
        {
            @await Html.PartialAsync("_TemplateSettings", template)
        }
    </div>

    <div class="d-flex col-form fw-bold justify-content-between">
        <div>
            <label class="col-form-label fw-bold">Sources:</label>
            <span class="col-form-label fw-bold">123</span>
        </div>

        <div class="d-flex align-items-center">
            <label class="mx-1" for="test">Enable stricted</label>
            <input class="mx-1" id="test" type="checkbox"/>

            <span>Color Picker</span>
            <button class="btn btn-secondary d-flex" data-bs-toggle="modal" data-bs-target="#colorModal">Default Colors</button>
            <div class="modal fade" id="colorModal" tabindex="-1" aria-labelledby="colorModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="colorModalLabel">Default Colors</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body d-flex justify-content-between flex-row">
                            <div id="defaultColors" class="column">
                                @foreach (var color in Model.ColorSettings.Colors)
                                {
                                    <div class="d-flex m-1">
                                        <div class="color-box" style="background-color: @color.Name;"></div>
                                        <button class="btn btn-minus btn-sm no-border" onclick="deleteColor(this)">
                                            <i class="fa fa-trash" aria-hidden="true"></i>
                                        </button>
                                    </div>
                                }
                            </div>
                            <div>
                                <div class="form-group mt-2">
                                    <label for="modalColorInput">Choose color</label> 
                                    <input type="color" class="form-control" id="modalColorInput">
                                </div>
                                <button class="btn btn-primary mt-2" onclick="addColorFromModal()">Add</button>
                                <button class="btn btn-primary mt-2" onclick="restoreDefaultColors()">Restore defaults</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div id="plots" class="mt-1">
        <ul id="sources" class="list-group">
            @foreach (var (_, source) in Model.Sources)
            {
                @await Html.PartialAsync("_SourceSettings", source)
            }
        </ul>
    </div>

    <div class="d-flex justify-content-center mt-2" style="color: grey; font-size: larger">
        <span>Drag and drop sensor to the plot above</span>
    </div>
</div>

@await Html.PartialAsync("_ApplyTemplateModal")
@await Html.PartialAsync("~/Views/Shared/_ConfirmationModal.cshtml")


<script>
    var selectedColors = [];

    function addColorFromModal() {
        const colorList = document.getElementById('defaultColors');
        if (colorList.children.length >= 20)
            return;
        
        const newColorRGBValue = $('#modalColorInput').val();
        for(const i of selectedColors){
            if (i === newColorRGBValue){
                showToast('Color already exists', 'Adding color info')
                return;
            }
        }
        
        const color = document.createElement('div');
        color.className = 'd-flex m-1';
        color.innerHTML = `
             <div class="color-box" style="background-color: ${newColorRGBValue};"></div>
             <button class="btn btn-minus btn-sm no-border" onclick="deleteColor(this)">
             <i class="fa fa-trash" aria-hidden="true"></i>
                </button>
        `;

        colorList.appendChild(color);
        selectedColors.push(newColorRGBValue);
    }
    
    function deleteColor(colorNode){
        console.log(colorNode)
        
        colorNode.parentNode.parentNode.removeChild(colorNode.parentNode)
    }
    
    async function restoreDefaultColors(){
      await fetch(window.location.pathname, {
            method: 'PUT',
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({
                colorSettings: {
                    restoreDefault: true
                }
            })
        }).then((response) => {
            window.location.reload();
      });
    }

    let rangePreviewUpdate;
    var multichartRange;
    
    $(() => {
        selectedColors = @Html.Raw(@JsonSerializer.Serialize(Model.ColorSettings.Colors.Select(x => x.Name).ToList()))
        
        setMultichartRemoveListeners();
                
        if ('@isYRangeAvailabe' !== 'True')
            $('#y-range-settings').hide();

        const ySettings = @Html.Raw(JsonSerializer.Serialize(Model.YRange, jsonOptions));
        const values = @Html.Raw(JsonSerializer.Serialize(Model.Sources.Values, jsonOptions));
        multichartRange = ySettings.autoScale === true ? true : [Number(ySettings.minValue), Number(ySettings.maxValue)];

        multiChartPanelInit(values, '@Model.MainSensorType', '@(Model.MainUnit.HasValue ? Model.MainUnit : "")', 300, multichartRange)
        
        if ($('#multichart')[0].data.length === 0)
            Plotly.relayout('multichart', { 'xaxis.visible': false, 'yaxis.visible': false });
        
        window.dispatchEvent(new Event('resize'));

        $('#editablePanelSettings form').on('submit', function (event){
            event.preventDefault();
            event.stopImmediatePropagation();

            submit((id) => window.location.href = `/Dashboards/${id}`)
        })
    })
    
    function submit(callback){
        let form = $('#editablePanelSettings form')[0];
        $.ajax({
            type: 'post',
            url: $(form).attr("action"),
            data: new FormData(form),
            datatype: 'html',
            processData: false,
            contentType: false,
            cache: false,
            async: true
        }).done(function(id){
            callback(id);
        }).fail(function (response){
            showToast(response.responseText);
        })
    }
    
    $('#YRange_MinValue').on('change', function (){
        rangeUpdate(600)
    })
    
    $('#YRange_MaxValue').on('change', function (){
        rangeUpdate(600)
    })
    
    function rangeUpdate(time) {
        clearTimeout(rangePreviewUpdate)
        rangePreviewUpdate = setTimeout(function (){
            submit(() => window.location.reload())
        }, time);
    }
    
    $('#autoscale').on('change', function (){
        if ($(this).is(':checked'))
            $('#autoscale-range').addClass('disabled-group')
        else
            $('#autoscale-range').removeClass('disabled-group')
            
        rangeUpdate(200)
    })
    
    $('#multichart').on('plotly_legendclick', function (data) {
        return false;
    });

    function showProductInLabels() {
        $('#sources li').each(function (idx, li) {
            let source = $(li);

            let idAttr = source.attr('id');
            let sourceId = idAttr.substring('source_'.length, idAttr.length);

            if ($(`input[name='ShowProduct']`).is(':checked'))
                $(`#productName_${sourceId}`).removeClass('d-none');
            else
                $(`#productName_${sourceId}`).addClass('d-none');

            realtimeUpdate(sourceId);
        });
    }

    function showProperiesInLabels() {
        $('#sources li').each(function (idx, li) {
            let source = $(li);

            let idAttr = source.attr('id');
            let sourceId = idAttr.substring('source_'.length, idAttr.length);

            if ($(`input[name='ShowProperties']`).is(':checked')) {
                $(`#label_property_${sourceId}`).removeClass('d-none');
                $(`#showSensorProperty_input_${sourceId}`).attr('disabled', true).removeClass('fw-bold').addClass('fw-normal');
                $(`#showSensorProperty_${sourceId}`).removeClass('fw-bold').addClass('fw-normal');
            }
            else {
                const showProperty = $(`#showSensorProperty_input_${sourceId}`);
                const labelProperty = $(`#label_property_${sourceId}`);
                const showSensorProperty = $(`#showSensorProperty_${sourceId}`);
                if (!showProperty.is(':checked')) {
                    labelProperty.addClass('d-none');
                }
                
                showProperty.attr('disabled', false);
                showSensorProperty.addClass('fw-bold').removeClass('fw-normal');
                showProperty.addClass('fw-bold').removeClass('fw-normal')
            }

            realtimeUpdate(sourceId);
        });
    }

    function addTemplate() {
        $.ajax({
            url: `${window.location.pathname}/@(nameof(DashboardsController.AddTemplate))`,
            method: "POST",
            cache: false
        }).done(function (viewData) {
            $(`#templates`).append(viewData);
        });
    }
</script>