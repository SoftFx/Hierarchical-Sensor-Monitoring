@using System.Text.Json
@using HSMCommon.Extensions
@using HSMServer.Constants
@using HSMServer.Controllers
@using HSMServer.Dashboards
@using HSMServer.JsonConverters
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using HSMServer.Model.Authentication

@model HSMServer.Model.Dashboards.PanelViewModel

@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

@{
    var jsonOptions = new JsonSerializerOptions()
    {
        PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
        Converters = { new PlotlyDoubleConverter(), new VersionSourceConverter() }
    };
    var legendsTitle = @Model.Settings.ShowLegend ? "Hide legends" : "Show legends";
    var settingsButtonsDisplayClass = @Model.Settings.IsSingleMode ? "d-none" : "";
    
    var lastUpdate = (long)(@Model.LastUpdate - new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc)).TotalMilliseconds;
    var mainSensorType = Model.MainSensorType is null ? byte.MinValue : (byte)Model.MainSensorType;
}

<div id="@Model.Id" class="panel resize-draggable">
    <div class="d-flex flex-column">
        <span id="emptypanel_@Model.Id" style="font-size: larger; position: fixed; z-index: 300; color: rgb(128,128,128); display: none">Empty panel</span>
        <div class="d-flex flex-row justify-content-between align-items-center px-1 pt-1 name-draggable">
            <div class="d-inline-block overflow-hidden">
                <div class="d-flex">
                    <span class="fw-bold d-flex" title="@Model.Name" id="panel_name" style="white-space: nowrap">
                        @Model.Name
                      @if (@Model.AggregateValues)
                        {
                            <span class="d-flex ms-1 fw-normal" style="color:grey; font-size: smaller; align-self: center">(values are aggregated)</span> 
                        }
                    </span>
                </div>

                @if (string.IsNullOrEmpty(Model.Description))
                {
                    <div style="height: 1.5rem"></div>
                }
                else
                {
                    <span class="fw-lighter d-flex" id="panel_description" title="@Model.Description" style="color: grey; white-space: nowrap;">@Model.Description</span>
                }
            </div>
            <div class="align-self-start">
                <span class="time-ago-div" id="lastUpdate_@Model.Id" style="font-size: smaller"></span>

                @if (Context.User is User user && user.IsAdmin)
                {
                    <button class="btn p-1 action-button" data-bs-toggle="dropdown" data-bs-auto-close="outside" aria-haspopup="true" aria-expanded="false">
                        <i class="fa-solid fa-ellipsis-vertical button-link"></i>
                    </button>
                    <div class="dropdown-menu dropdown-menu-end" aria-labelledby="actionButton">
                        <a class="@settingsButtonsDisplayClass toggle-legend dropdown-item text-decoration-none fw-normal button-link">@legendsTitle</a>
                        <a class="dropdown-item text-decoration-none fw-normal button-link" asp-controller="@ViewConstants.DashboardsController" asp-action="@nameof(DashboardsController.AddDashboardPanel)" asp-route-dashboardId="@Model.DashboardId" asp-route-panelId="@Model.Id">Edit</a>
                        <a id="remove_@Model.Id" class="removePanel dropdown-item text-decoration-none fw-normal button-link">Remove</a>
                        <a class="switch-mode dropdown-item text-decoration-none fw-normal button-link">Switch mode</a>

                        <div class="@settingsButtonsDisplayClass dropdown-submenu">
                            <a class="dropdown-item">Hover settings</a>
                            <div class="dropdown-menu p-4 pt-2">
                                <label class="form-label">Hover Mode</label>
                                <select class="hovermode form-control">
                                    @foreach (var mode in Enum.GetValues<TooltipHovermode>())
                                    {
                                        <option value='@((int) mode)'>@mode.GetDisplayName()</option>
                                    }
                                </select>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <span class="p-1">
                        <i class="fa-solid fa-ellipsis-vertical disabled" style="color: darkgrey"></i>
                    </span>
                }
            </div>
        </div>
    </div>


    @if (Model.Settings.IsSingleMode)
    {
        <div id="panelLastValue_@Model.Id">
            @await Html.PartialAsync("_SourceLastValue", Model)
        </div>
    }
    else
    {
        <div id="panelChart_@Model.Id"></div>
    }
</div>


<script>
    $(() => {
        const settings = @Html.Raw(JsonSerializer.Serialize(Model.Settings, jsonOptions));
        const ySettings = @Html.Raw(JsonSerializer.Serialize(Model.YRange, jsonOptions));
        const values = @Html.Raw(JsonSerializer.Serialize(Model.Sources.Values, jsonOptions));

        initPanel('@Model.Id', settings, ySettings, values, Number('@lastUpdate'), '@Model.DashboardId', Number('@mainSensorType'), '@Model.MainUnit');  
    })
</script>