@using HSMServer.Model.Dashboards

@model DatasourceViewModel

@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers


<li id='source_@Model.Id' class="mb-2">
    <div class="d-flex flex-row align-items-center">
        <div class="card w-100">
            <div class="card-body py-2">
                <div class="d-flex flex-column" style="flex-grow: 10">
                    <div class="d-flex mx-1 align-items-center">
                        <label class="fw-bold me-1">Label:</label>
                        <label id="productName_@Model.Id" class="text-nowrap me-1 @(Model.ShowProduct ? string.Empty : "d-none")">@Model.DisplayProduct</label>
                        <input id='name_input_@Model.Id' class="form-control" asp-for="Label" type="text" oninput="javascript:realtimeUpdate('@Model.Id')" />
                        <input id='name_default_@Model.Id' class="d-none" value="@Model.SensorName">

                        <label class="fw-bold ms-2 me-1">Property:</label>
                        <select id="property_@Model.Id" class="form-select w-auto" title="Property to output" asp-for="Property" asp-items="@Model.AvailableProperties" onchange="javascript:realtimeUpdate('@Model.Id')"></select>

                        <a href="https://plotly.com/javascript/line-charts/#line-shape-options-for-interpolation" target="_blank" class="fw-bold ms-2 me-1">Shape:</a>
                        <select id="shape_@Model.Id" class="form-select w-auto" title="Shape of chart line" asp-for="Shape" asp-items="@Model.AvailableShapes" onchange="javascript:realtimeUpdate('@Model.Id')"></select>

                        <input id='color_@Model.Id' type="color" asp-for="Color" class="form-control form-control-color mx-1" oninput="javascript:realtimeUpdate('@Model.Id')" />
                    </div>
                    <div class="d-flex align-items-center">
                        <span class="ms-1" style="color: grey;font-size: x-small;text-decoration-line: underline;cursor: pointer;" onclick="javascript:redirectToHome('@Model.SensorId')">
                            @Model.Path
                        </span>
                    </div>
                </div>
            </div>
        </div>    
    
        <div>
            <button id="actionButton" class="btn" data-bs-toggle="dropdown" data-bs-auto-close="true" aria-haspopup="true" aria-expanded="false">
                <i class="fa-solid fa-ellipsis-vertical button-link"></i>
            </button>
            <div class="dropdown-menu dropdown-menu-end" aria-labelledby="actionButton">
                <a class="dropdown-item text-decoration-none fw-normal button-link" href="javascript:removeSource('@Model.Id')">Remove</a>
                <a class="dropdown-item text-decoration-none fw-normal button-link" href="javascript:removeAllSources()">Remove all sources</a>
            </div>
        </div>
    </div>
</li>


<script>
    function realtimeUpdate(id) {
        updateSource($(`#name_input_${id}`).val(), $(`#color_${id}`).val(), $(`#property_${id}`).val(), $(`#shape_${id}`).val(), $(`input[name='ShowProduct']`).is(':checked'), id);
    }

    function removeSource(sourceId) {
        showConfirmationModal(
            `Removing source`,
            `Do you really want to remove selected source?`,
            function () {
                deletePlot(sourceId);
            }
        );
    }

    function deletePlot(sourceId) {
        let model = getCurrentPlotInDashboard(sourceId)

        if (model !== undefined) {
            $.ajax({
                type: 'delete',
                url: window.location.pathname + '/' + sourceId
            }).done(function (response) {
                Plotly.deleteTraces('multichart', model.id).then(
                    (data) => {
                        if (data.data.length === 0) {
                            Plotly.relayout('multichart', { 'xaxis.visible': false, 'yaxis.visible': false });
                            $('#emptypanel').show();
                        }

                        $('[id^="source"] li')[model.oldIndex].remove();
                        syncIndexes();
                        if ($('[id^="source"] li').length === 0)
                            $('#y-range-settings').show();
                    }
                )
            }).fail(function (response) {
                showToast(response.responseText);
            });
        }
    }
</script>
