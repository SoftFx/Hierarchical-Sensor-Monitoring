@using HSMCommon.Extensions
@using HSMServer.Constants
@using HSMServer.Controllers
@using HSMServer.Extensions
@using HSMServer.Model.Authentication
@using HSMServer.Model.ViewModel
@using HSMServer.Model.Folders.ViewModels
@using Microsoft.AspNetCore.Mvc.TagHelpers

@model HSMServer.Model.ViewModel.NodeInfoBaseViewModel

@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

@{
    var user = User as User;
    bool hasUserRights = Model is FolderInfoViewModel f ? user.IsFolderManager(f.Id) : user.IsManager(Model.RootProductId);

    string updateAction = null, getAction = null;

    if (Model is FolderInfoViewModel)
    {
        updateAction = nameof(HomeController.UpdateFolderInfo);
        getAction = nameof(HomeController.GetFolderInfo);
    }
    else if (Model is ProductInfoViewModel)
    {
        updateAction = nameof(HomeController.UpdateProductInfo);
        getAction = nameof(HomeController.GetProductInfo);
    }
    else if (Model is SensorInfoViewModel)
    {
        updateAction = nameof(HomeController.UpdateSensorInfo);
        getAction = nameof(HomeController.GetSensorInfo);
    }
}


<div id="meta_info_@Model.EncodedId">
    <div class="d-flex justify-content-between flex-grow-1">
        <div class='d-flex justify-content-start align-items-center'>
            @if (Model is FolderInfoViewModel)
            {
                <i class="fa-regular fa-folder my-1 sensor-icon-with-margin"></i>
            }
            else
            {
                <i id='status_@Model.EncodedId' class='@Model.Status.ToIcon() my-1 sensor-icon-with-margin' title='Status: @Model.Status'></i>
                <span id="alertIcons_@Model.EncodedId" class="me-1">
                    @await Html.PartialAsync("~/Views/Home/Alerts/_AlertIconsList.cshtml", new AlertIconsViewModel(Model.AlertIcons, true))
                </span>
            }

            <h5 id="nodeHeader" class="d-flex my-1">@Html.Raw(Model.Header)</h5>

            @if (Model is SensorInfoViewModel sensor && sensor.SelectedUnit.HasValue)
            {
                <h5 class="ms-1 my-1">(@sensor.SelectedUnit.GetDisplayName())</h5>
            }

            @if (hasUserRights)
            {
                <a id="editButtonMetaInfo" class="d-flex px-2 icon-link" href="#" title='edit meta info'>
                    <i class='fas fa-edit align-self-center'></i>
                </a>
            }
        </div>

        <div id='update_@Model.EncodedId' class='d-flex my-1 time-ago-div'>updated @Model.LastUpdateTime.GetTimeAgo()</div>
    </div>

    <form id="editMetaInfo_form" method="post" asp-action="@updateAction">
        <input id="metaInfo_encodedId" style='display: none' asp-for="EncodedId" value="@Model.EncodedId"/>

        <div id="headline_metainfo" class="d-none d-flex" style="height: 2rem;">
            <label id="description_title" class="col-form-label fw-bold">Description:</label>
        </div>

        @if (!string.IsNullOrEmpty(Model.Description))
        {
            <label class="col-form-label py-0" id='markdown_span_description'>@Model.Description</label>
        }
        <div>
            <textarea id='description' class="form-control w-100 d-none"  type='text' asp-for="Description" value='@Model.Description'></textarea>
        </div>

        @await Html.PartialAsync("~/Views/Home/Alerts/_Alerts.cshtml", Model)

        <div class="collapse" id="metaInfoCollapse">
            @await Html.PartialAsync("_GeneralInfo", Model)
            @await Html.PartialAsync("_CleanupSettings", Model)
        </div>

        <button class="btn btn-outline-secondary w-100 border-start-0 border-end-0 border-top-0 rounded-0 border-bottom-1"
                id="meta_info_collapse" title="Show more info..." type="button" data-bs-toggle="collapse" onclick="collapseChangeTextContent()"
                href="#metaInfoCollapse" role="button" aria-expanded="false" aria-controls="metaInfoCollapse" style="border-right-color: unset;--bs-btn-hover-bg: #edf0f5">
            <i id="collapse_icon" class="fa-solid fa-caret-down"></i>
        </button>

        <div class="d-flex justify-content-end mt-3 gap-2 me-0">
            <button id='saveInfo' type='submit' class='btn btn-secondary px-2 independentSizeButton' data-bs-toggle='tooltip' title='save meta info' hidden>
                <span>Save</span>
            </button>
            <button id='revertInfo' type='button' class='btn btn-secondary px-2 independentSizeButton' data-bs-toggle='tooltip' title='revert changes' hidden>
                <span>Cancel</span>
            </button>
        </div>
    </form>
    
    <hr id="metainfo_separator" class="d-none"/>
</div>


<script>
    $(document).ready(() => {
        replaceHtmlToMarkdown('markdown_span_description');
        replaceHtmlToMarkdown('markdown_status_comment');

        $('#editButtonMetaInfo').on('click', function (){
            let icon = getAdvancedInfoButtonIcon();
            if (!isAdvancedInfoVisible(icon)) {
                $('#meta_info_collapse').click();
                showAdvancedInfo(icon);
            }

            editInfoButtonClick();

            $('#editButtonMetaInfo').addClass('d-none');
        });
        
        $('#revertInfo').on('click', function (){
            revertInfoButtonClick("@Url.Action(getAction, ViewConstants.HomeController)");
           
            $('#metainfo_separator').addClass('d-none');
        });
    })

    $(document).on("submit", "#editMetaInfo_form", function (event) {
        event.preventDefault();
        event.stopImmediatePropagation();

        var formData = new FormData(this);
        collectAlerts(formData);

        $.ajax({
            url: $("#editMetaInfo_form").attr("action"),
            type: 'POST',
            data: formData,
            processData: false,
            contentType: false,
            async: true,
            success: (viewData) => {
                $('#editButtonMetaInfo').removeClass('d-none');
                displayMetaInfo($('#metaInfo_encodedId').val(), viewData);

                if ($(".field-validation-error").length !== 0)
                    editInfoButtonClick()
            }
        });
    });

    function collectAlerts(formData) {
        $("[id^='dataAlertsList_']").each(function () {
            const type = this.id.substring("dataAlertsList_".length, this.id.length);

            setFormDataAlerts(formData, type, $(this));
        });
    }

    function setFormDataAlerts(formData, type, alertsList) {
        alertsList.find(`div.dataAlertRow`).each(function (i) {
            setFormDataAlertsProperty(formData, "input", type, i, $(this), "Id");
            setFormDataAlertsProperty(formData, "input", type, i, $(this), "EntityId");
            setFormDataAlertsProperty(formData, "input", type, i, $(this), "IsDisabled");

            $(this).find(`div[name='alertCondition']`).each(function (j) {
                setFormDataAlertsListProperty(formData, type, i, j, $(this), "Conditions", "select", "Property");

                let intervalOperationBlock = $(this).find('div.interval-operation');
                if (intervalOperationBlock.hasClass("d-flex")) {
                    setFormDataAlertsConditionIntervals(formData, type, i, j, intervalOperationBlock, "select", "Interval");
                    setFormDataAlertsConditionIntervals(formData, type, i, j, intervalOperationBlock, "input", "CustomString");
                }
                else {
                    let operationBlock = $(this).find('div.operation');

                    setFormDataAlertsListProperty(formData, type, i, j, operationBlock, "Conditions", "select", "Operation");
                    setFormDataAlertsListProperty(formData, type, i, j, operationBlock, "Conditions", "input", "Target");
                }
            });

            $(this).find(`div[name='alertAction']`).each(function (j) {
                setFormDataAlertsListProperty(formData, type, i, j, $(this), "Actions", "select", "Action");

                let sendBlock = $(this).find('div[name="sendNotificationAction"]');
                if (sendBlock.hasClass('d-flex')) {
                    setFormDataAlertsListProperty(formData, type, i, j, sendBlock, "Actions", "input", "Comment");
                    setFormDataAlertsSendNotificationChats(formData, type, i, j, sendBlock);

                    let scheduleBlock = sendBlock.find('div[name="schedule"]');
                    if (scheduleBlock.hasClass('d-flex')) {
                        setFormDataAlertsListProperty(formData, type, i, j, scheduleBlock, "Actions", "select", "ScheduleRepeatMode");
                        setFormDataAlertsListProperty(formData, type, i, j, scheduleBlock, "Actions", "input", "ScheduleStartTime");
                        setFormDataAlertsListProperty(formData, type, i, j, scheduleBlock, "Actions", "input", "ScheduleInstantSend", 'checkbox');
                    }
                }

                let showBlock = $(this).find('div[name="showIconAction"]');
                if (showBlock.hasClass('d-flex')) {
                    showBlock.find(`div[name='emoji']`).each(function () {
                        formData.append(`DataAlerts[${type}][${i}].Actions[${j}].Icon`, $(this)[0].innerText);
                    });
                }
            });
        });
    }

    function setFormDataAlertsProperty(formData, element, type, i, block, propertyName) {
        block.find(`${element}[name='${propertyName}']:first`).each(function () {
            formData.append(`DataAlerts[${type}][${i}].${propertyName}`, $(this).val());
        });
    }

    function setFormDataAlertsListProperty(formData, type, i, j, block, list, element, propertyName, elementType = undefined) {
        block.find(`${element}[name='${propertyName}']`).each(function () {
            let value = $(this).val();
            if (elementType == 'checkbox') {
                value = this.checked;
            }

            formData.append(`DataAlerts[${type}][${i}].${list}[${j}].${propertyName}`, value);
        });
    }

    function setFormDataAlertsConditionIntervals(formData, type, i, j, block, element, propertyName) {
        var targetName = block.attr("name");

        block.find(`${element}[name='Target.${propertyName}']`).each(function () {
            formData.append(`DataAlerts[${type}][${i}].Conditions[${j}].${targetName}.${propertyName}`, $(this).val());
        });
    }

    function setFormDataAlertsSendNotificationChats(formData, type, i, j, block) {
        let chats = [];

        block.find("select[name='Chats']:first option").each(function () {
            if ($(this).is(':selected')) {
                chats.push($(this).val());
            }
        })

        for (let k = 0; k < chats.length; ++k){
            formData.append(`DataAlerts[${type}][${i}].Actions[${j}].Chats[${k}]`, chats[k]);
        }
    }

    function getAdvancedInfoButtonIcon() {
        return $('#collapse_icon')[0];
    }
    
    function isAdvancedInfoVisible(icon) {
        return icon.classList.contains('fa-caret-up');
    }

    function collapseChangeTextContent() {
        let icon = getAdvancedInfoButtonIcon();

        if (icon.classList.contains('fa-caret-up')) {
            hideAdvancedInfo(icon);
        }
        else {
            showAdvancedInfo(icon);
        }
    }

    function showAdvancedInfo(icon) {
        icon.classList.toggle('fa-caret-up')
        $('#meta_info_collapse').attr('title', 'Hide info...');
        $('#description_title').removeClass('d-none');
        $('#headline_metainfo').removeClass('d-none');
        $('#markdown_span_description').addClass('ms-3');
    }

    function hideAdvancedInfo(icon) {
        icon.classList.toggle('fa-caret-down')
        $('#meta_info_collapse').attr('title', 'Show more info...');
        $('#description_title').addClass('d-none');
        $('#headline_metainfo').addClass('d-none');
        $('#markdown_span_description').removeClass('ms-3');
    }
</script>
