@using HSMServer.Constants
@using HSMServer.Controllers
@using HSMServer.Extensions
@using HSMServer.Model.Authentication
@using HSMServer.Model.ViewModel
@using HSMServer.Model.TreeViewModel
@using HSMServer.Model.Folders.ViewModels
@using Microsoft.AspNetCore.Mvc.TagHelpers

@model HSMServer.Model.ViewModel.NodeInfoBaseViewModel

@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

@{
    var user = User as User;
    bool hasUserRights = Model is FolderInfoViewModel f ? user.IsFolderManager(f.Id) : user.IsManager(Model.RootProductId);

    string updateAction = null, getAction = null;

    if (Model is FolderInfoViewModel)
    {
        updateAction = nameof(HomeController.UpdateFolderInfo);
        getAction = nameof(HomeController.GetFolderInfo);
    }
    else if (Model is ProductInfoViewModel)
    {
        updateAction = nameof(HomeController.UpdateProductInfo);
        getAction = nameof(HomeController.GetProductInfo);
    }
    else if (Model is SensorInfoViewModel)
    {
        updateAction = nameof(HomeController.UpdateSensorInfo);
        getAction = nameof(HomeController.GetSensorInfo);
    }
}


<div id="meta_info_@Model.EncodedId">
    <div class="d-flex justify-content-between flex-grow-1">
        <div class='d-flex justify-content-start'>
            @if (Model is FolderInfoViewModel)
            {
                <i class="fa-regular fa-folder my-1 align-self-center sensor-icon-with-margin"></i>
            }
            else
            {
                <span id='status_@Model.EncodedId' class='@Model.Status.ToIcon() my-1 align-self-center sensor-icon-with-margin' title='Status: @Model.Status'></span>
            }

            <h5 class="d-flex my-1 align-self-top">@Html.Raw(Model.Header)</h5>
        </div>

        <div id='update_@Model.EncodedId' class='d-flex my-1 time-ago-div'>updated @Model.LastUpdateTime.GetTimeAgo()</div>
    </div>

    <form id="editMetaInfo_form" method="post" asp-action="@updateAction">
        <input id="metaInfo_encodedId" style='display: none' asp-for="EncodedId" value="@Model.EncodedId"/>

        <div id="headline_metainfo" class="d-none d-flex" style="height: 2rem;">
            <div id="description_title" class="d-none form-control px-0 border-0 fw-bold" style="max-width: 15rem;">
                Description:
            </div>

            @if (hasUserRights)
            {
                <div class="d-flex my-1 ms-auto align-items-baseline">
                    <a id="editButtonMetaInfo" class="d-none d-flex px-2 pb-2" href="#" title='edit meta info'><i class='fas fa-edit align-self-center'></i> Edit</a>
                </div>
            }
        </div>

        <div class="naked-text ms-1 w-100" id='markdown_span_description'>@Model.Description</div>
        <div class="d-none d-flex w-100 ps-3">
            <textarea id='description' class="form-control naked-text w-100 d-none"  type='text' asp-for="Description" value='@Model.Description' disabled></textarea>
        </div>

        <div class="collapse" id="metaInfoCollapse">
            <div class="form-control border-0 fw-bold px-0" style="max-width: 15rem;">
                General info:
            </div>

            @if (Model is FolderInfoViewModel folder)
            {
                @await Html.PartialAsync("_ChildrenStatistic", new ChildrenStatistic("Products", folder.TotalProducts, folder.ProductStatuses))
            }
            else if (Model is ProductInfoViewModel product)
            {
                @await Html.PartialAsync("_ChildrenStatistic", new ChildrenStatistic("Nodes", product.TotalNodes, product.NodeStatuses))
                @await Html.PartialAsync("_ChildrenStatistic", new ChildrenStatistic("Sensors", product.TotalSensors, product.SensorsStatuses))
            }
            else if (Model is SensorInfoViewModel sensor)
            {
                <div class="d-flex justify-content-start">
                    <div class="d-flex ms-3 text-nowrap">
                        <span style="min-width: 8rem">Sensor type:</span>
                    </div>
                    <div class="d-flex w-100">
                        <span>@(sensor.SensorType)</span>
                    </div>
                    <input id='sensor_type_@Model.EncodedId' value='@((int)sensor.SensorType)' style='display: none' />
                </div>

                <div id="status_metainfo" class="d-flex justify-content-start">
                    <div class="d-flex ms-3 text-nowrap">
                        <span style="min-width: 8rem">Sensor status:</span>
                    </div>
                    <div class="d-flex w-100">
                        <li id='metainfo_icon_status' class='@Model.Status.ToIcon() sensor-icon-with-margin align-self-center' title='Status: @Model.Status'></li>
                        <span id="status_name_@Model.EncodedId">@Model.Status</span>
                    </div>
                </div>

                if (sensor.HasGrafana)
                {
                    <div class="d-flex justify-content-start">
                        <div class="d-flex ms-3 text-nowrap">
                            <span style="min-width: 8rem">Enabled for:</span>
                        </div>
                        <div class="d-flex w-100">
                            <div class="sensor-icon-with-margin">
                                <img class="tree-png-icon" src="~/dist/grafana.svg" alt="!" />
                            </div>
                            <span>Grafana</span>
                        </div>
                    </div>
                }

                <div id="validation_metainfo" class="d-flex justify-content-start">
                    @if (!string.IsNullOrEmpty(sensor.StatusComment))
                    {
                        <div class="d-flex ms-3 text-nowrap">
                            <span style="min-width: 8rem">Status comment:</span>
                        </div>
                        <div class="d-flex w-100">
                            <span id="markdown_status_comment">@Html.Raw(sensor.StatusComment)</span>
                        </div>
                    }
                </div>
            }

            @await Html.PartialAsync("_Alerts", Model)
        </div>

        <button class="btn btn-outline-secondary w-100 border-start-0 border-end-0 border-top-0 rounded-0 border-bottom-1"
                id="meta_info_collapse" title="Show more info..." type="button" data-bs-toggle="collapse" onclick="collapseChangeTextContent()"
                href="#metaInfoCollapse" role="button" aria-expanded="false" aria-controls="metaInfoCollapse" style="border-right-color: unset;--bs-btn-hover-bg: #edf0f5">
            <i id="collapse_icon" class="fa-solid fa-caret-down"></i>
        </button>

        <div class="d-flex justify-content-end mt-3 gap-2 me-0">
            <button id='saveInfo' type='submit' class='btn btn-secondary px-2 independentSizeButton' data-bs-toggle='tooltip' title='save meta info' hidden>
                <span>Save</span>
            </button>
            <button id='revertInfo' type='button' class='btn btn-secondary px-2 independentSizeButton' data-bs-toggle='tooltip' title='revert changes' hidden>
                <span>Cancel</span>
            </button>
        </div>
    </form>
    
    <hr id="metainfo_separator" class="d-none"/>
</div>



<script>
    $(document).ready(() => {
        replaceHtmlToMarkdown('markdown_span_description');
        replaceHtmlToMarkdown('markdown_status_comment');

        $('#editButtonMetaInfo').on('click', function (){
            editInfoButtonClick();
        });
        
        $('#revertInfo').on('click', function (){
            revertInfoButtonClick("@Url.Action(getAction, ViewConstants.HomeController)");
           
            $('#metainfo_separator').addClass('d-none');
        });
    })

    $(document).on("submit", "#editMetaInfo_form", function (event) {
        event.preventDefault();
        event.stopImmediatePropagation();

        $.ajax({
            url: $("#editMetaInfo_form").attr("action"),
            type: 'POST',
            data: $("#editMetaInfo_form").serialize(),
            datatype: 'json',
            async: true,
            success: (viewData) => {
                displayMetaInfo($('#metaInfo_encodedId').val(), viewData);
                
                if ($(".field-validation-error").length !== 0)
                    editInfoButtonClick()
            }
        });
    });

    function collapseChangeTextContent() {
        let icon = $('#collapse_icon')[0];

        if (icon.classList.contains('fa-caret-up')) {
            icon.classList.toggle('fa-caret-down')
            $('#meta_info_collapse').attr('title', 'Show more info...');
            $('#editButtonMetaInfo').addClass('d-none');
            $('#description_title').addClass('d-none');
            $('#headline_metainfo').addClass('d-none');
            $('#markdown_span_description').removeClass('ms-3');
        }
        else {
            icon.classList.toggle('fa-caret-up')
            $('#meta_info_collapse').attr('title', 'Hide info...');
            $('#editButtonMetaInfo').removeClass('d-none');
            $('#description_title').removeClass('d-none');
            $('#headline_metainfo').removeClass('d-none');
            $('#markdown_span_description').addClass('ms-3');
        }
    }
</script>
