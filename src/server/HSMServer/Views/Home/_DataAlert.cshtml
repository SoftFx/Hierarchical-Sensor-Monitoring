@using HSMServer.Model.DataAlerts
@using HSMServer.Extensions
@using HSMCommon.Extensions
@using HSMServer.Controllers

@model DataAlertViewModelBase

@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers


<div class="dataAlertRow">
    <input class="d-none" asp-for="Id" value="@Model.Id" />
    <input class="d-none" asp-for="EntityId" value="@Model.EntityId" />

    <div id="dataAlertLabel_@Model.Id" class="ms-3 @(Model.IsModify ? "d-none" : string.Empty)">
        If <b>@Model.Property @Model.Operation.GetDisplayName() @Model.Value</b> then send <i class='@Model.Icon.ToIconClass()'></i> with message <i>@Model.DisplayComment</i> and @AlertPredefined.Statuses[Model.Status] sensor status
    </div>

    <div id="dataAlertInputGroupd_@Model.Id" class="mb-2 @(!Model.IsModify ? "d-none" : string.Empty)">
        <div class="input-group">
            <label class="input-group-text">If</label>
            <select class="form-select" asp-for="Property" asp-items="@Model.PropertiesItems"></select>
            <select class="form-select" asp-for="Operation" asp-items="@Model.ActionsItems"></select>
            <input type="text" class="form-control" placeholder="value" asp-for="Value" value="@Model.Value" required>

            <label class="input-group-text">and sensitivity<i class='fas fa-question-circle mx-2' title='Time format: dd.hh:mm:ss min value 00:01:00. If the sensor doesn`t return to Ok status after the specified time inverval, a notification sends'></i></label>
            <div id="partialRestoreSelect" class="w-30">
                <partial name="_TimeIntervalSelect" for="Sensitivity" />
            </div>
            <label class="input-group-text">than</label>

            <button id="actionButton" class="btn" data-bs-toggle="dropdown" data-bs-auto-close="true" aria-haspopup="true" aria-expanded="false">
                <i class="fa-solid fa-ellipsis-vertical button-link"></i>
            </button>
            <div class="dropdown-menu dropdown-menu-end" aria-labelledby="actionButton">
                <a class="dropdown-item text-decoration-none fw-normal button-link advancedMode">Hide actions panel</a>
                <a class="dropdown-item text-decoration-none fw-normal button-link sendMessage">Send test message</a>
                <a class="dropdown-item text-decoration-none fw-normal button-link deleteRow">Remove</a>
            </div>
        </div>

        <div id="alertActions">
            <div class="input-group ms-3 w-75">
                <label class="input-group-text">send telegram notification with comment</label>
                <input type="text" class="form-control" placeholder="template" asp-for="Comment" value="@Model.Comment" required>
            </div>

            <div class="input-group ms-3">
                <label class="input-group-text">show icon</label>
                <select class="form-select icons-select" asp-for="Icon">
                    @foreach (var item in Model.IconsItems)
                    {
                        <option value="@item.Value">@Html.Raw(item.Text)</option>
                    }
                </select>
                <label class="input-group-text">in tree</label>
            </div>

            <div class="input-group ms-3 w-20">
                <select class="form-select" asp-for="Status" asp-items="@Model.StatusesItems"></select>
                <label class="input-group-text">sensor status</label>
            </div>
        </div>
    </div>
</div>


<script>
    $(document).ready(function () {
        $("a.deleteRow").off("click").on("click", function () {
            $(this).parents("div.dataAlertRow:first").remove();
        });
    });

    $(document).ready(function () {
        $("a.advancedMode").off("click").on("click", function () {
            let element = $(this).parents("div.dataAlertRow:first");
            let advancedPanel = element.find($(`div[id='alertActions']`));

            let see = $(this).text().includes("See");
            if (see) {
                $(this).text("Hide actions panel");
                advancedPanel.removeClass("d-none");
            }
            else {
                $(this).text("See actions panel");
                advancedPanel.addClass("d-none");
            }
        });
    });

    $(document).ready(function () {
        $("a.sendMessage").off("click").on("click", function () {
            var element = $(this).parents("div.dataAlertRow:first");

            if (!tryValidate(element, "input", "Value") || !tryValidate(element, "input", "Comment")) {
                return;
            }

            var form = new FormData();
            appendProperty(form, element, "select", "Property");
            appendProperty(form, element, "select", "Operation");
            appendProperty(form, element, "select", "Status");
            appendProperty(form, element, "select", "Icon");
            appendProperty(form, element, "input", "Comment");
            appendProperty(form, element, "input", "Value");
            appendProperty(form, element, "input", "EntityId");

            $.ajax({
                url: '@Url.Action(nameof(HomeController.SendTestMessage))',
                type: 'POST',
                data: form,
                processData: false,
                contentType: false,
                async: true
            });
        });
    });

    function appendProperty(form, element, propertyElement, propertyName) {
        form.append(`alert.${propertyName}`, element.find($(`${propertyElement}[name='${propertyName}']`)).val());
    }

    function tryValidate(element, propertyElement, propertyName) {
        var input = element.find($(`${propertyElement}[name='${propertyName}']`));
        
        return input[0].reportValidity();
    }
</script>
