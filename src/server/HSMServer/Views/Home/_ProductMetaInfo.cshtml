@using HSMServer.Controllers
@using HSMServer.Constants
@using HSMServer.Core.Extensions
@using HSMServer.Model.ViewModel
@model ProductInfoViewModel

@{
    var productName = Model.ProductName ?? Model.Name;
}

@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers


<form id="editProductMetaInfo_form" method="post" asp-action="@nameof(HomeController.UpdateProductInfo)">
    <input id="productMetaInfo_encodedId" style='display: none' asp-for="EncodedId" value="@Model.EncodedId"/>

    <table class='table table-bordered'>
        <tbody>
            <tr>
                <td class="w-25">Product</td>
                <td>
                    @if (productName.Length >= 100)
                    {
                        @Html.Raw(productName[..100])
                    }
                    else
                    {
                        @Html.Raw(productName)
                    }
                </td>
            </tr>
            @if (Model.Parent != null)
            {
                <tr>
                    <td class="w-25">Path</td>
                    <td>@Html.Raw(@Model.Path)</td>
                </tr>
            }
            <tr>
                <td class="w-25">
                    Expected update interval
                    @if (!Model.IsOwnExpectedUpdateInterval)
                    {
                        <span>(from parent)</span>
                    }
                    <i class='fas fa-question-circle' title='Time format: dd.hh:mm:ss min value 00:01:00'></i>
                </td>
                <td id="productExpectedUpdateInterval_@(Model.EncodedId)">
                    <label id="labelInterval" class="form-control naked-text">@Model.ExpectedUpdateInterval.DisplayInterval</label>
                    <div id="partialIntervalSelect" class="d-none">
                        <partial name="_TimeIntervalSelect" for="ExpectedUpdateInterval"/>
                    </div>
                </td>
            </tr>
            <tr>
                <td class="w-25">
                    Description
                </td>
                <td>
                    <textarea id='description_@(Model.EncodedId)' type='text' class='form-control naked-text' asp-for="Description" value='@Model.Description' disabled></textarea>
                </td>
            </tr>
        </tbody>
    </table>
    <div class="d-flex justify-content-end mt-3 gap-2 me-0">
        <button id='saveInfo_@Model.EncodedId' type='submit' class='btn btn-secondary px-2 independentSizeButton'
                data-bs-toggle='tooltip' title='save meta info' hidden disabled>
            <span>Save</span>
        </button>
        <button id='revertInfo_@Model.EncodedId' type='button' class='btn btn-secondary px-2 independentSizeButton' onclick="revertProductInfoClick()"
                data-bs-toggle='tooltip' title='revert changes' hidden disabled>
            <span>Cancel</span>
        </button>
    </div>
</form>


<script>
    disableProductExpectedUpdateInterval();

    $(document).on("submit", "#editProductMetaInfo_form", function (event) {
        event.preventDefault();
        event.stopImmediatePropagation();

        $.ajax({
            url: $("#editProductMetaInfo_form").attr("action"),
            type: 'POST',
            data: new FormData(this),
            datatype: 'html',
            processData: false,
            contentType: false,
            cache: false,
            async: true,
            success: function (viewData) {
                $('#editProductButton').attr('hidden', false);
                $('#product_info_' + $('#productMetaInfo_encodedId').val()).html(viewData);
            }
        });
    });

    function editProductInfoButtonClick() {
        let productId = $('#productMetaInfo_encodedId').val();

        $('#saveInfo_' + productId).removeAttr("disabled").removeAttr("hidden");
        $('#revertInfo_' + productId).removeAttr("disabled").removeAttr("hidden");
        $('#description_' + productId).removeAttr("disabled").removeClass("naked-text");
        
        $('#editProductButton').attr('hidden', true);
        $('#partialIntervalSelect').removeClass('d-none');
        $('#labelInterval').addClass('d-none');
        
        $('#productExpectedUpdateInterval_' + productId + ' :input').each(function () {
            this.removeAttribute('disabled');
        });
    }

    function revertProductInfoClick() {
        let id = $('#productMetaInfo_encodedId').val();

        $.ajax({
            type: 'GET',
            url: `@Html.Raw(Url.Action(nameof(HomeController.GetProductInfo), ViewConstants.HomeController))?Id=${id}`,
            dataType: 'html',
            contentType: 'application/json',
            cache: false,
            async: true
        }).done(function (viewData) {
            $('#product_info_' + id).html(viewData);
            $('#editProductButton').attr('hidden', false);
            
            disableProductExpectedUpdateInterval();
        });
    }

    function disableProductExpectedUpdateInterval() {
        let productId = $('#productMetaInfo_encodedId').val();

        $('#productExpectedUpdateInterval_' + productId + ' :input').each(function () {
            this.setAttribute('disabled', true);
        });
    }
</script>