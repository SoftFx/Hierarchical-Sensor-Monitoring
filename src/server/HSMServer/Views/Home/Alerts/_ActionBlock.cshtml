@using HSMCommon.Extensions
@using HSMServer.Extensions
@using HSMServer.Model.TreeViewModel
@using HSMServer.Notifications
@using HSMServer.Model.DataAlerts

@model ActionViewModel

@inject ITelegramChatsManager ChatsManager

@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers


@{
    var action = Model.Action;

    var isSendAction = action == ActionType.SendNotification;
    var isShowAction = action == ActionType.ShowIcon;
    var hasSchedule = Model.ScheduleRepeatMode is not null;

    var isSecondaryCondition = !Model.IsMain;

    var chats = ChatsManager.GetValues().Where(x => Model.AvailableChats.Contains(x.Id)).ToList();
}


<div name="alertAction" class="d-flex align-items-top alert-blocks-group py-1 ms-3 w-100" >
    <div class="@isSecondaryCondition.ToVisibility() alert-text-block alert-add alert-and me-3">and</div>

    <select class="alert-block alert-select property-select me-3" asp-for="Action" asp-items="Model.Actions"></select>

    <div name="sendNotificationAction" class="@isSendAction.ToVisibility() d-flex align-items-center flex-wrap" style="flex-grow: 1;">
        <input type="text" class="alert-block target-input target-comment flex-grow-1" placeholder="message template" asp-for="Comment" value="@Model.Comment" required="@(isSendAction ? true : false)" style="max-width: 800px;">

        <div class="d-flex align-items-center flex-nowrap">
            <div class="alert-text-block operation-select ms-3">to</div>

            <select class="selectpicker ms-3" name="Chats" multiple
                    data-width="auto" data-live-search="true" data-style="alert-block target-input target-multiselect" data-placeholder="telegram chats" data-container="body">
                <option class="general-group-chat-mode" value="@ChatsMode.FromParent" selected="@(Model.ChatsMode is ChatsMode.FromParent)">@ChatsMode.FromParent.GetDisplayName()</option>
                <option class="general-group-chat-mode" value="@ChatsMode.NotInitialized" selected="@(Model.ChatsMode is ChatsMode.NotInitialized)">@ChatsMode.NotInitialized.GetDisplayName()</option>
                <option class="general-group-chat-mode" value="@ChatsMode.Empty" selected="@(Model.ChatsMode is ChatsMode.Empty)">@ChatsMode.Empty.GetDisplayName()</option>
                <option class="general-group-chat-mode" value="@ChatsMode.All" selected="@(Model.ChatsMode is ChatsMode.All)">@ChatsMode.All.GetDisplayName()</option>

                <option data-divider="true"></option>
                <option disabled>Groups</option>
                @foreach (var chat in chats.GetGroups())
                {
                    <option value="@chat.Id" selected="@Model.ChatIsSelected(chat)">@chat.Name</option>
                }

                <option data-divider="true"></option>
                <option disabled>Users</option>
                @foreach (var chat in chats.GetPrivates())
                {
                    <option value="@chat.Id" selected="@Model.ChatIsSelected(chat)">@chat.Name</option>
                }
            </select>
        </div>

        <a class="addSchedule @(hasSchedule ? "d-none" : string.Empty) flex-shrink-0"
           data-bs-toggle="tooltip"
           data-bs-placement="top"
           title="Add schedule">

            <i class="fa-regular fa-calendar-plus alert-schedule-button"></i>
        </a>






        <div name="schedule" class="schedule-container align-items-center @hasSchedule.ToVisibility() ms-3">
            <a class="removeSchedule me-2"
               data-bs-toggle="tooltip"
               data-bs-placement="top"
               title="Remove schedule">
                <i class="fa-regular fa-calendar-minus alert-schedule-button"></i>
            </a>

            <div class="d-flex align-items-center flex-nowrap">
                <div class="alert-text-block operation-select">scheduled every</div>
                <select class="alert-block alert-select target-input ms-2" asp-for="ScheduleRepeatMode" asp-items="Enum.GetValues<ScheduleRepeatMode>().ToSelectedItems(k => k.GetDisplayName())"></select>
            </div>

            @if (!Model.IsTtl)
            {


@*                 <div class="d-flex align-items-center flex-nowrap">
                    <div class="alert-text-block operation-select ms-3">starting at</div>

                    <div class="input-group d-flex align-items-center">
                        <input class="alert-block target-input ms-2 flatpickr-datetime"
                               type="text"
                               id="schedule"
                               asp-for="ScheduleStartTime" />

                        <a class="flex-shrink-0 calendar-trigger"
                           data-bs-toggle="tooltip"
                           data-bs-placement="top"
                           title="Calendar">
                            <i class="fa-regular fa-calendar-days calendar-button"></i>
                        </a>
                    </div>
                </div> *@

                <div class="d-flex align-items-center flex-nowrap">
                    <div class="alert-text-block operation-select">starting at</div>
                    <input class="alert-block target-input" type="datetime-local" step="1" id="schedule" asp-for="ScheduleStartTime">
                </div>

                <div class="d-flex align-items-center flex-nowrap">
                    <div class="alert-text-block operation-select ms-3">
                        and instant send
                        <i class='fas fa-question-circle' title='If the option is checked, the first alert message is sent immediately. And then at the end of scheduled period, the remaining alert messages will be sent, aggregated into one message.'></i>
                    </div>
                    <input class="form-check-input target-check ms-2" type="checkbox" asp-for="ScheduleInstantSend">
                </div>
            }


        </div>

        <a class="deleteAction align-self-end me-auto">
            <i class="fa-solid fa-xmark alert-delete-button"></i>
        </a>
    </div>

    <div name="showIconAction" class="@isShowAction.ToVisibility() alert-block ms-3">
        <div name="emoji" class="target-input">@Model.Icon</div>

        <a class="deleteAction align-self-end me-auto">
            <i class="fa-solid fa-xmark alert-delete-button"></i>
        </a>
    </div> 


</div>

<script>
    $(document).ready(function () {
        $("select[name='Chats']").selectpicker();

        $("select[name='Chats']").off('changed.bs.select').on('changed.bs.select', function (e, clickedIndex, isSelected, previousValue) {
            let allSelected = true;

            $(this).children().each(function () {
                allSelected &= $(this).is(':selected');
            });

            if (allSelected) {
                let $title = $(this).parent().find('.filter-option-inner-inner');
                $title.text("all chats");
            }

            if (clickedIndex >= 1 && clickedIndex <= 3 && isSelected) {
                $(this).val($(this)[0].options[clickedIndex].value);
            }
            else {
                if ($(this)[0].options[1].selected || $(this)[0].options[2].selected || $(this)[0].options[3].selected)
                    $(this).val($(this)[0].options[clickedIndex].value)
            }

            $(this).selectpicker('refresh')
        });

        $("div[name='emoji']").emojioneArea({
            filtersPosition: "bottom",
            standalone: true,
            autocomplete: false,
            ui: {
                hideButtons: true   
            }
        });

        // if (typeof flatpickr !== "undefined") {

        //     try {
        //         $(".flatpickr-datetime").each(function () {
        //             var input = $(this)[0];
        //             var fp = flatpickr(input, {
        //                 enableTime: true,
        //                 dateFormat: "m/d/Y H:i",
        //                 time_24hr: true,
        //                 todayHighlight: true,
        //                 allowInput: true,
        //                 clickOpens: true,
        //                 utc: true
        //             });

        //             $(this).next(".calendar-trigger").on("click", function () {
        //                 $(".flatpickr-datetime").focus();
        //             });
        //         });
        //     } catch (e) {
        //         console.error("Flatpickr initialization error:", e);
        //     }
        // } else {
        //     console.warn("Flatpickr not loaded - falling back to native input");
        // }
    });

    $('select[name="Action"]').off("change").on("change", function () {
        let actionBlock = $(this).parents("div[name='alertAction']:first");

        let send = actionBlock.find($(`div[name='sendNotificationAction']`));
        let show = actionBlock.find($(`div[name='showIconAction']`));

        let commentInput = send.find($(`input[name='Comment']`));

        let action = $(this).val();
        if (action === '@ActionType.SendNotification') {
            show.removeClass("d-flex").addClass('d-none');

            commentInput.attr('required', true);
            send.removeClass("d-none").addClass('d-flex');
        }
        else if (action === '@ActionType.ShowIcon') {
            commentInput.attr('required', false);
            send.removeClass("d-flex").addClass('d-none');

            show.removeClass("d-none").addClass('d-flex');
        }
        else if (action === '@ActionType.SetStatus') {
            commentInput.attr('required', false);
            send.removeClass("d-flex").addClass('d-none');
            show.removeClass("d-flex").addClass('d-none');
        }
    });

    $("a.deleteAction").off("click").on("click", function () {
        let actionsBlock = $(this).parents(`div[name='actionsBlock']`);

        $(this).parents("div[name='alertAction']:first").remove();

        let alertAction = actionsBlock.find(`div[name='alertAction']:first`);
        alertAction.find('div.alert-and').remove();
    });

    $("a.addSchedule").off("click").on("click", function () {
        let sendNotificationBlock = $(this).parents("div[name='sendNotificationAction']:first");
        let schedule = sendNotificationBlock.find($(`div[name='schedule']`));

        schedule.removeClass("d-none").addClass("d-flex");
        $(this).addClass("d-none");
    });

    $("a.removeSchedule").off("click").on("click", function () {
        let sendNotificationBlock = $(this).parents("div[name='sendNotificationAction']:first");
        let schedule = sendNotificationBlock.find($(`div[name='schedule']`));
        let addschedule = sendNotificationBlock.find($(`a.addSchedule`));

        addschedule.removeClass("d-none");
        schedule.removeClass("d-flex").addClass("d-none");
    });
</script>

<style>
    .flatpickr-datetime {
        margin-top: 2px;
        width: 130px;
    }

    .schedule-container {
        flex-wrap: wrap;
        gap: 10px;
        max-width: 100%;
        word-wrap: break-word;
        overflow: hidden;
    }
</style>

