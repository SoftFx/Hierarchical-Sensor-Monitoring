@using HSMCommon.Extensions
@using HSMServer.Extensions
@using HSMServer.Notifications
@using HSMServer.Model.DataAlerts

@model ActionViewModel

@inject ITelegramChatsManager ChatsManager

@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers


@{
    var action = Model.Action;

    var isSendAction = action == ActionType.SendNotification;
    var isShowAction = action == ActionType.ShowIcon;
    var hasSchedule = Model.ScheduleRepeatMode is not null;

    var isSecondaryCondition = !Model.IsMain;

    var chats = new List<TelegramChat>();
    if (Model.Node.TryGetChats(out var availableChats))
        foreach (var chat in ChatsManager.GetValues())
        {
            if (availableChats.Contains(chat.Id))
                chats.Add(chat);
        }
}


<div name="alertAction" class="d-flex flex-row align-items-center alert-blocks-group py-1 ms-3">
    <div class="@isSecondaryCondition.ToVisibility() alert-text-block alert-add me-3">and</div>

    <select class="alert-block alert-select property-select" asp-for="Action" asp-items="Model.Actions" disabled="@(Model.IsMain ? true : false)"></select>

    <div name="sendNotificationAction" class="@isSendAction.ToVisibility() align-items-center">
        <input type="text" class="alert-block target-input target-comment" placeholder="message template" asp-for="Comment" value="@Model.Comment" required="@(isSendAction ? true : false)">
        <div class="alert-text-block operation-select">to</div>
        <select class="selectpicker" name="Chats" multiple
                data-width="100%" data-live-search="true" data-style="alert-block target-input target-multiselect" data-placeholder="telegram chats" data-actions-box="true" data-container="body">
            <option value="@ActionViewModel.AllChatsId" selected="@(Model.Chats?.Contains(ActionViewModel.AllChatsId) ?? true)">All chats</option>

            <option data-divider="true"></option>
            <option disabled>Groups</option>
            @foreach (var chat in chats.GetGroups())
            {
                <option value="@chat.Id" selected="@Model.ChatIsSelected(chat)">@chat.Name</option>
            }

            <option data-divider="true"></option>
            <option disabled>Users</option>
            @foreach (var chat in chats.GetPrivates())
            {
                <option value="@chat.Id" selected="@Model.ChatIsSelected(chat)">@chat.Name</option>
            }
        </select>

        <a class="addSchedule @(hasSchedule ? "d-none" : string.Empty)"><i class="fa-regular fa-calendar-plus alert-schedule-button"></i></a>

        <div name="schedule" class="align-items-center @hasSchedule.ToVisibility()">
            <a class="removeSchedule"><i class="fa-regular fa-calendar-minus alert-schedule-button"></i></a>

            <div class="alert-text-block operation-select">scheduled every</div>
            <select class="alert-block alert-select target-input" asp-for="ScheduleRepeatMode" asp-items="Enum.GetValues<ScheduleRepeatMode>().ToSelectedItems(k => k.GetDisplayName())"></select>

            <div class="alert-text-block operation-select">starting at</div>
            <input class="alert-block target-input" type="datetime-local" step="1" id="schedule" asp-for="ScheduleStartTime">

            <div class="alert-text-block operation-select">
                and instant send
                <i class='fas fa-question-circle' title='If the option is checked, the first alert message is sent immediately. And then at the end of scheduled period, the remaining alert messages will be sent, agregated into one message.'></i>
            </div>
            <input class="form-check-input target-check" type="checkbox" asp-for="ScheduleInstantSend">
        </div>
    </div>

    <div name="showIconAction" class="@isShowAction.ToVisibility() alert-block">
        <div name="emoji" class="target-input">@Model.Icon</div>
    </div>

    <a class="deleteAction">
        <i class="@isSecondaryCondition.ToVisibility() fa-solid fa-xmark alert-delete-button"></i>
    </a>
</div>


<script>
    $(document).ready(function () {
        $("select[name='Chats']").selectpicker();

        $("select[name='Chats']").off('changed.bs.select').on('changed.bs.select', function (e, clickedIndex, isSelected, previousValue) {
            let allSelected = true;

            $(this).children().each(function() {
                allSelected &= $(this).is(':selected');
            });
            
            if (allSelected) {
                let $title = $(this).parent().find('.filter-option-inner-inner');
                $title.text("all chats");
            }
        });

        $("div[name='emoji']").emojioneArea({
            filtersPosition: "bottom",
            standalone: true,
            autocomplete: false
        });
    });

    $('select[name="Action"]').off("change").on("change", function () {
        let actionBlock = $(this).parents("div[name='alertAction']:first");

        let send = actionBlock.find($(`div[name='sendNotificationAction']`));
        let show = actionBlock.find($(`div[name='showIconAction']`));

        let commentInput = send.find($(`input[name='Comment']`));

        let action = $(this).val();
        if (action === '@ActionType.SendNotification') {
            show.removeClass("d-flex").addClass('d-none');

            commentInput.attr('required', true);
            send.removeClass("d-none").addClass('d-flex');
        }
        else if (action === '@ActionType.ShowIcon') {
            commentInput.attr('required', false);
            send.removeClass("d-flex").addClass('d-none');

            show.removeClass("d-none").addClass('d-flex');
        }
        else if (action === '@ActionType.SetStatus') {
            commentInput.attr('required', false);
            send.removeClass("d-flex").addClass('d-none');
            show.removeClass("d-flex").addClass('d-none');
        }
    });

    $("a.deleteAction").off("click").on("click", function () {
        $(this).parents("div[name='alertAction']:first").remove();
    });

    $("a.addSchedule").off("click").on("click", function () {
        let sendNotificationBlock = $(this).parents("div[name='sendNotificationAction']:first");
        let schedule = sendNotificationBlock.find($(`div[name='schedule']`));

        schedule.removeClass("d-none").addClass("d-flex");
        $(this).addClass("d-none");
    });

    $("a.removeSchedule").off("click").on("click", function () {
        let sendNotificationBlock = $(this).parents("div[name='sendNotificationAction']:first");
        let schedule = sendNotificationBlock.find($(`div[name='schedule']`));
        let addschedule = sendNotificationBlock.find($(`a.addSchedule`));

        addschedule.removeClass("d-none");
        schedule.removeClass("d-flex").addClass("d-none");
    });
</script>