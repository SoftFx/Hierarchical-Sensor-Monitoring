@using HSMServer.Controllers
@using HSMServer.Core.Model
@using HSMServer.Core
@using HSMServer.Extensions
@using HSMServer.Model.TreeViewModel
@using HSMServer.Model.ViewModel

@model SensorNodeViewModel

@{
    var file = Model.LastValue as FileValue;
    bool isEnabledPreview = false;
    if (file is not null)
        isEnabledPreview = (file.Extension == "csv" && file.OriginalSize < 5 * 1024 * 1024) ||
                           (file.Extension == "txt" && file.OriginalSize < 1024 * 1024);

    var sensorId = Model.EncodedId;

    var graphElementId = $"graph_{sensorId}";
    var graphParentDivId = $"graph_parent_{sensorId}";
    var valuesElementId = $"values_{sensorId}";
    var valuesParentDivId = $"values_parent_{sensorId}";

    string visibilityClass = Model.UpdateTime == DateTime.MinValue ? "d-none" : string.Empty;
}


<div>
    @await Html.PartialAsync("_MetaInfo", new SensorInfoViewModel(Model))

    @if (Model.Type == SensorType.File)
    {
        @if (file is not null)
        {
            <div class='accordion mt-2' id='sensorData_@sensorId'>
                <div class='accordion-item'>
                    <h2 class='accordion-header' id='heading_@sensorId'>
                        <button id='file_accordion_@sensorId' class='accordion-button collapsed pt-2 pb-1' type='button' data-bs-toggle='collapse'
                                data-bs-target='#file_collapse_@sensorId' aria-expanded='false' aria-controls='file_collapse_@sensorId'>
                            <div class="w-100">
                                <div class='row justify-content-between'>
                                    <div class='row col-md-auto align-items-center align-self-baseline'>
                                        <div class='col-md-auto sensor-icon-without-padding'>
                                            <li id='file_status_@sensorId' class='@Model.Status.ToIcon() sensor-icon-with-margin'
                                                title='Status: @Model.Status'>
                                            </li>

                                            @if (Model.HasData)
                                            {
                                                @Model.FileNameString
                                                <div class="text-break pt-2">
                                                    <span id='validation_@sensorId'>
                                                        @if (!string.IsNullOrEmpty(Model.LastValue.Comment))
                                                        {
                                                            <span class="d-flex text-break">Comment: @Model.LastValue.Comment</span>
                                                        }

                                                        @if (Model.IsValidationErrorVisible)
                                                        {
                                                            <li id='errorIcon_@sensorId' class='fas fa-exclamation-triangle me-1'></li>
                                                            <span>Status comment: @Model.ValidationError</span>
                                                        }
                                                    </span>
                                                </div>
                                            }
                                            else
                                            {
                                                @Model.Name
                                            }
                                        </div>
                                    </div>
                                    <div class='col-md-auto time-ago-div me-3' id='update_@sensorId'>
                                        <div id="side_info_@sensorId" class="d-flex flex-md-column align-items-end" style="font-size: smaller">
                                            @if (Model.HasData)
                                            {
                                                <span>
                                                    Size: @file?.FileSizeToNormalString()
                                                </span>
                                                <span>
                                                    @file?.ReceivingTime.ToDefaultFormat()
                                                </span>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </button>
                    </h2>
                    <div id='file_collapse_@sensorId' class='accordion-collapse collapse text-break' aria-labelledby='heading_@sensorId' data-bs-parent='#sensorData_@sensorId'>
                        <div class='accordion-body p-3'>
                            @if (Model.LastValue != null)
                            {
                                <div class="row">
                                    <div class="d-flex col-6">
                                        <div class="align-self-center text-end">
                                            @if (isEnabledPreview)
                                            {
                                                <h5 class="mb-0" id="preview-header">Content:</h5>
                                            }
                                        </div>
                                    </div>
                                    <div class="col-6">
                                        <div class="justify-content-end">
                                            <div class="d-flex flex-row-reverse">
                                                <input style='display: none;' id='fileType_@sensorId' value='@Model.FileNameString'/>
                                                <a id='button_download_@sensorId' class='btn btn-outline-secondary d-flex justify-content-center align-items-center mx-1 button-width-static' title='Download'>
                                                    <i class='fas fa-file-download small-icon pe-1'></i>
                                                    <span style="font-size: smaller">Download</span>
                                                </a>
                                                <a id='button_view_@sensorId' class='btn btn-outline-secondary d-flex justify-content-center align-items-center mx-1 button-width-static' title='Preview'>
                                                    <i class='fas fa-eye small-icon pe-1'></i>
                                                    <span style="font-size: smaller"> Preview</span>
                                                </a>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="d-grid d-none pt-3" id="preview">
                                    <div style="overflow-x: auto" id="preview-content"></div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <div id='dataPanel' class='pt-3 text-break @visibilityClass'>
            <div class="d-flex justify-content-between">
                <div>
                    <label class="me-1" for="from_@sensorId">From:</label>
                    <input class="me-2" type="datetime-local" id="from_@sensorId" name="from">

                    <label class="me-1" for="to_@sensorId">To:</label>
                    <input class="me-2" type="datetime-local" id="to_@sensorId" name="to">

                    @if (Model.Type.IsBar())
                    {
                        <label class="me-1" for="barsCount_@sensorId" id="labelBarsCount_@sensorId">Bars count:</label>
                        <input class="me-2" style="width:70px" type="number" id="barsCount_@sensorId" name="barsCount" min="1" max="1000">
                    }

                    <button onclick="searchHistory('@sensorId')" type="button" class="btn btn-secondary">
                        <i type="button" class="fas fa-search"></i>
                    </button>
                </div>

                <div class='btn-group'>
                    <button class='btn btn-secondary btn-sm dropdown-toggle' type='button' data-bs-toggle='dropdown'>Actions</button>
                    <ul class='dropdown-menu'>
                        <li>
                            <a class='dropdown-item' href='#' id='button_export_csv_@sensorId'>Export to CSV</a>
                        </li>
                    </ul>
                </div>
            </div>
            <div class="mt-2">
                <div id='no_data_@sensorId' style='display: none'>
                    <p>No data for the specified period</p>
                </div>
                <div id='history_@sensorId'>
                    @if (Model.IsChartSupported)
                    {
                        <ul class='nav nav-tabs'>
                            <li class='nav-item'>
                                <a id='link_graph_@sensorId' class='nav-link active' data-bs-toggle='tab' href='#@graphParentDivId'>Graph</a>
                            </li>
                            <li class='nav-item'>
                                <div class="d-flex flex-row align-items-center">
                                    <a id='link_table_@sensorId' class='nav-link' data-bs-toggle='tab' href='#@valuesParentDivId'>
                                        Table
                                        <span id="newValuesCount" class="badge rounded-pill badge-light fw-semibold"></span>
                                    </a>
                                    <div id="tableHistoryRefreshButton" class="table-history-refresh ms-3 d-none">
                                        <a class='table-history-refresh-link fw-semibold' href="javascript:refreshTable();">Refresh</a>
                                    </div>
                                </div>
                            </li>
                        </ul>
                        <div class='tab-content'>
                            <div class='tab-pane fade show active' id=@graphParentDivId>
                                <div id='@graphElementId'></div>
                            </div>
                            <div class='tab-pane fade' id=@valuesParentDivId>
                                <div id='@valuesElementId'></div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div id='values_@sensorId'></div>
                    }
                </div>
            </div>
        </div>
    }

    <div id="recentValues_@sensorId"></div>
</div>


<script>
    var previousReceivedTime = undefined;

    $(document).ready(function () {
        if ('@(Model.Type is SensorType.File)' === 'True') {
            setContentPreview('@Model.EncodedId');
        }
    });

    function setContentPreview(encodedId) {
        $.ajax({
            type: 'GET',
            url: `${getFileInfo}?Selected=${encodedId}`,
            cache: false,
            contentType: "application/json",
            success: function (response) {
                if (previousReceivedTime === response.time)
                    return;

                if ((response.originalSize < 5 * 1024 * 1024 && response.extension === 'csv') || // 5MB
                    (response.originalSize < 1024 * 1024 && response.extension === 'txt')) { // 1MB
                    $.ajax({
                        type: 'POST',
                        url: `${viewFileAction}?Selected=${encodedId}`,
                        cache: false,
                        contentType: "application/json",
                        success: function (file) {
                            let dataSet = [];
                            if (response.extension === 'csv') {
                                file.split('\n').forEach(el => {
                                    let splitted = el.split(',');

                                    let isEmpty = splitted.every(x => {
                                        return x !== '';
                                    })

                                    if (isEmpty) {
                                        dataSet.push(el.split(','))
                                    }
                                });

                                let columns = [];

                                dataSet[0].forEach(el => {
                                    columns.push({ "title": el })
                                });

                                $('#preview').removeClass('d-none container');
                                $('#preview-content').html('<table class="display w-100" id="example"></table>');

                                $('#example').dataTable({
                                    "data": dataSet.splice(1),
                                    "columns": columns,
                                    "lengthMenu": [[5, 20, 50, 100], [5, 20, 50, 100]],
                                    "pageLength": 20
                                });
                            }
                            else if (response.extension === 'txt') {
                                $('#preview').removeClass('d-none container');
                                $('#preview-content').addClass('w-100 mw-100 text-break').html(file);
                            }
                        }
                    })
                }
                else {
                    $('#bigFilePreview').removeClass('d-none');
                }

                loadFiles();
                previousReceivedTime = response.time;
            }
        })
    }

    function loadFiles() {
        $.ajax({
            type: 'GET',
            url: `@Url.Action(nameof(HomeController.GetRecentFilesView), "Home")?fileId=@Model.EncodedId`,
            cache: false,
            contentType: "application/json",
            success: function (response) {
                $('#recentValues_@Model.EncodedId').html(response);
            }
        })
    }

    function refreshTable() {
        $(`#link_table_@sensorId`).trigger('click');
    }
</script>