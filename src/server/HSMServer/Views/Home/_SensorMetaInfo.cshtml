@using HSMServer.Controllers
@using HSMServer.Core.Model
@using HSMServer.Extensions
@using HSMServer.Model.ViewModel

@model SensorInfoViewModel

@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers


<div id='sensor_info_@Model.EncodedId'>
    <div class="d-flex ms-1 mt-1 me-0 justify-content-between flex-grow-1" style="height: 2rem!important;">
        <div class='d-flex justify-content-start'>
            <h5 class="my-1 align-self-top">@Html.Raw($"{Model.ProductName}{Model.Path}")</h5>
        </div>
        <div class='d-flex my-1'>
            <input id='sensor_type_@Model.EncodedId' value='@((int)Model.SensorType)' style='display: none'/>
            <div id='update_@Model.EncodedId' class='time-ago-div me-1'>updated @Model.UpdateTime.GetTimeAgo()</div>
        </div>
    </div>
    @if (!string.IsNullOrEmpty(Model.ShortLastValue) && Model.SensorType is not SensorType.File)
    {
        <div class="d-flex">
            <span class="mt-1 ms-1" style="color: #0366d6">Last value: @Model.ShortLastValue</span>
        </div>
    }
    @if (!string.IsNullOrEmpty(Model.Comment))
    {
        <div class="d-flex mt-1" style="color: #0366d6">
            <span class="ms-1">Comment: </span> 
            <span class="ms-1" id="markdown_comment" >@Model.Comment</span>
        </div>
    }


    <form class="mb-0" asp-action="@nameof(HomeController.UpdateSensorInfo)" id="editSensorMetaInfo_form">
        <input id="sensorMetaInfo_encodedId" style='display: none' asp-for="EncodedId" value="@Model.EncodedId"/>
        <div class="d-flex" style="height: 2rem;">
            <div id="description_sensor_metainfo" class="form-control ps-0 ms-1 border-0 fw-bold" style="max-width: 15rem;">
                Description:
            </div>
            <div class="d-flex my-2 pb-2 ms-auto align-items-baseline">
                <a id="editButtonMetaInfo" class="d-none d-flex px-2 " href="#" onclick="editInfoButtonClick()" title='edit meta info'><i class='fas fa-edit align-self-center'></i> Edit</a>
            </div>
        </div>

        <div class="naked-text ms-1 w-100" id='markdown_span_description_@(Model.EncodedId)'>@Model.Description</div>
        <div class="d-none d-flex w-100 ms-1">
            <textarea id='description_@(Model.EncodedId)' class="form-control naked-text w-100 mx-1 px-2 d-none"  type='text' asp-for="Description" value='@Model.Description' disabled></textarea>
        </div>


        <div class="collapse" id="metaInfoCollapse">
            <div class="form-control border-0 fw-bold mb-1 px-0 ms-1" style="max-width: 15rem;">
                General info:
            </div>
            <div class="d-flex justify-content-start ms-1">
                <div class="d-flex ps-2 ms-1 text-nowrap">
                    <span style="min-width: 8rem">Sensor type:</span>
                </div>
                <div class="d-flex w-100 ps-2">
                    <span>@Model.SensorType</span>
                </div>
            </div>
            <div id="status_metainfo" class="d-flex justify-content-start ms-1">
                <div class="d-flex ps-2 ms-1 text-nowrap">
                    <span style="min-width: 8rem">Sensor status:</span>
                </div>
                <div class="d-flex w-100 ps-2">
                    <span id="status_name_@Model.EncodedId">@Model.SensorStatus</span>
                    <li id='status_@Model.EncodedId' class='@Model.SensorStatus.ToIcon() sensor-icon-with-margin align-self-center ps-1' title='Status: @Model.SensorStatus'></li>
                </div>
            </div>
            <div id="validation_metainfo" class="d-flex justify-content-start ms-1 mb-1">
                @if (!string.IsNullOrEmpty(Model.StatusComment))
                {
                    <div class="d-flex ps-2 ms-1 text-nowrap">
                        <span style="min-width: 8rem">Status comment:</span>
                    </div>
                    <div class="d-flex w-100 ps-2">
                        <span id="markdown_status_comment">@Html.Raw(Model.StatusComment)</span>
                    </div>
                }
            </div>
            <div class="form-control border-0 fw-bold mb-1 px-0 ms-1" style="max-width: 15rem;">
                Alerts:
            </div>
            <div class="d-flex ps-2 ms-2 text-nowrap align-self-center">
                <span class="d-flex align-items-center" style="min-width: 18rem">
                    Expected sensor(s) update interval <i class='fas fa-question-circle ps-1' title='Time format: dd.hh:mm:ss min value 00:01:00. If the sensor doesn`t receive new data within the specified time interval, a notification sends'></i>
                </span>
                <div class="d-flex flex-grow-1">
                    <label id="labelInterval" class="d-flex form-control naked-text">@Model.SensorRestorePolicy.DisplayInterval</label>
                    <div id="partialIntervalSelect" class="d-flex flex-grow-1 d-none">
                        <partial name="_TimeIntervalSelect" for="ExpectedUpdateInterval"/>
                    </div>
                </div>
            </div>
            <div class="d-flex mt-1 ps-2 ms-2 text-nowrap">
                <span class="d-flex align-items-center" style="min-width: 18rem">
                    Sensitivity sensor(s) interval <i class='fas fa-question-circle ps-1' title='Time format: dd.hh:mm:ss min value 00:01:00. If the sensor doesn`t receive new data within the specified time interval, a notification sends'></i>
                </span>
                <div class="d-flex flex-grow-1">
                    <label id="labelRestoreInterval" class="d-flex form-control flex-grow-1 naked-text">@Model.SensorRestorePolicy.DisplayInterval</label>
                    <div id="partialRestoreSelect" class="d-flex flex-grow-1 d-none">
                        <partial name="_TimeIntervalSelect" for="SensorRestorePolicy"/>
                    </div>
                </div>
            </div>
        </div>
        <div class="d-flex justify-content-end m-3 my-2 gap-2 me-0">
            <button id='saveInfo_@(Model.EncodedId)' type='submit' class='btn btn-secondary px-2 independentSizeButton'
                    data-bs-toggle='tooltip' title='save meta info' hidden disabled>
                <span>Save</span>
            </button>
            <button id='revertInfo_@(Model.EncodedId)' type='button' class='btn btn-secondary px-2 independentSizeButton' onclick="revertInfoClick()"
                    data-bs-toggle='tooltip' title='revert changes' hidden disabled>
                <span>Cancel</span>
            </button>
        </div>

        <button class="btn btn-outline-secondary w-100 
                       border-start-0 border-end-0 border-top-0 rounded-0 border-bottom-1" id="sensor_info_collapse" title="Show more info..." type="button" data-bs-toggle="collapse" onclick="collapseChangeTextContent()" href="#metaInfoCollapse" role="button" aria-expanded="false" aria-controls="metaInfoCollapse" style="border-right-color: unset;--bs-btn-hover-bg: #edf0f5">
            <i id="collapse_icon" class="fa-solid fa-caret-down"></i>
        </button>
    </form>
</div>

<script>
    $(document).ready(() => {
        let description = $('[id^="description_"]')[0].innerHTML;
        
        if (description !== '' && description !== undefined)
            $('#editSensorMetaInfo_form').children('div').first().removeClass('d-none');
        else {
            let temp = $('#editSensorMetaInfo_form').children('div').first().clone().removeClass('d-none');
            $('#editSensorMetaInfo_form').children('div').first().remove();
            $('#metaInfoCollapse').prepend(temp);
        }
        
        replaceHTMLtoMarkdown();
    });
    
    $(document).on("submit", "#editSensorMetaInfo_form", function (event) {
        event.preventDefault();
        event.stopImmediatePropagation();

        $.ajax({
            url: $("#editSensorMetaInfo_form").attr("action"),
            type: 'POST',
            data: $("#editSensorMetaInfo_form").serialize(),
            datatype: 'json',
            async: true,
            success: (viewData) => {
                displaySensorMetaInfo($('#sensorMetaInfo_encodedId').val(), viewData);
            }
        });
    });
    
    function replaceHTMLtoMarkdown()
    {
       $('[id^="markdown_"]').each( function () {
            let innerHtml = $(this)[0].innerHTML;
            $(this).empty().append(markdownToHTML(innerHtml))
            $(this).children().last().css('margin-bottom',0);
       });
    }
    
    function collapseChangeTextContent(){
        let icon = $('#collapse_icon')[0];
        
        if (icon.classList.contains('fa-caret-up')) {
            icon.classList.toggle('fa-caret-down')
            $('#sensor_info_collapse').attr('title', 'Show more info...');
            $('#editButtonMetaInfo').addClass('d-none');
        }
        else {
            icon.classList.toggle('fa-caret-up')
             $('#sensor_info_collapse').attr('title', 'Hide info...');
            $('#editButtonMetaInfo').removeClass('d-none');
        }
    }
</script>