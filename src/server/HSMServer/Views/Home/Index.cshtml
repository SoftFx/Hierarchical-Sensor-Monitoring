@using HSMServer.Constants
@using HSMServer.Controllers
@using HSMServer.Model.TreeViewModel

@{
    ViewData["Title"] = "Home";
    Layout = "~/Views/Tree/_Layout.cshtml";
}


<script>
    var isDataValidAction = "@Url.Action(nameof(HomeController.IsMetaInfoValid), ViewConstants.HomeController)";
    var getSensorStatus = "@Url.Action(nameof(SensorHistoryController.GetServiceStatusHistory), ViewConstants.HistoryController)";

    var updateSelectedNode = "@Url.Action(nameof(HomeController.UpdateSelectedNode), ViewConstants.HomeController)";
    var getJournalPage = "@Url.Action(nameof(JournalController.GetPage), ViewConstants.JournalController)";

    var getFileAction = "@Url.Action(nameof(HomeController.GetFile), ViewConstants.HomeController)";
    var viewFileAction = "@Url.Action(nameof(HomeController.GetFileStream), ViewConstants.HomeController)";
    var getFileInfo = "@Url.Action(nameof(HomeController.GetFileInfo), ViewConstants.HomeController)";

    var historyLatestAction = "@Url.Action(nameof(SensorHistoryController.TabelHistoryLatest), ViewConstants.HistoryController)";
    var historyAction = "@Url.Action(nameof(SensorHistoryController.TableHistory), ViewConstants.HistoryController)";
    var nextPageAction = "@Url.Action(nameof(SensorHistoryController.GetNextTablePage), ViewConstants.HistoryController)";
    var prevPageAction = "@Url.Action(nameof(SensorHistoryController.GetPreviousTablePage), ViewConstants.HistoryController)";

    var rawHistoryLatestAction = "@Url.Action(nameof(SensorHistoryController.ChartHistoryLatest), ViewConstants.HistoryController)";
    var rawHistoryAction = "@Url.Action(nameof(SensorHistoryController.ChartHistory), ViewConstants.HistoryController)";
    var exportHistoryAction = "@Url.Action(nameof(SensorHistoryController.ExportHistory), ViewConstants.HistoryController)";
    var reloadRequest = "@Url.Action(nameof(SensorHistoryController.ReloadHistoryRequest), ViewConstants.HistoryController)";

    var getGrid = `@Url.Action(nameof(HomeController.GetGrid))`;
    var getList = `@Url.Action(nameof(HomeController.GetList))`;

    var getSensorPlotInfo = "@Url.Action(nameof(SensorHistoryController.GetSensorPlotInfo), ViewConstants.HistoryController)";
    var getBackgroundId = "@Url.Action(nameof(SensorHistoryController.GetBackgroundSensorInfo), ViewConstants.HistoryController)";

    var exportFolderAlerts = "@Url.Action(nameof(AlertsController.ExportFolderAlerts), ViewConstants.AlertsController)";
    var exportAlerts = "@Url.Action(nameof(AlertsController.ExportAlerts), ViewConstants.AlertsController)";
    var importAlerts = "@Url.Action(nameof(AlertsController.ImportAlerts), ViewConstants.AlertsController)";
</script>


<div class="flex-grow-1 reserved-scroll-y overflow-y-auto">
    <div class="d-none" id="nodeDataSpinner">
        <div class="d-flex justify-content-center align-items-center center_relative_spinner">
            <div class="spinner-border normal_spinner text-secondary" role="status"></div>
        </div>
    </div>

    <div id="nodeDataPanel" class="hidden_element" style="min-width: 600px;">@await Html.PartialAsync("_NodeDataPanel", (NodeViewModel)null)</div>
</div>


<script>
    initialize();
    //initializeTreeNode();


    var interval = $("#treeInterval").val() * 1000;
    setTimeout(updateSelectedNodeData, interval);


    function updateGridCell(dataObject) {
        var id = dataObject.id;

        $('#gridCell_' + id).removeClass('grid-cell-offTime grid-cell-ok grid-cell-warning grid-cell-error');
        $('#gridCell_' + id).addClass(dataObject.gridCellColorClass);
        $('#gridCell_' + id).prop('title', dataObject.tooltip);
    }

    function updateNodeData(dataObject) {
        var id = dataObject.id;

        if (dataObject.sensorType !== 6)
            $('#update_' + id).empty().append(dataObject.updatedTimeStr);

        $('#status_' + id).removeClass('tree-icon-offTime tree-icon-ok tree-icon-warning tree-icon-error')
            .addClass(dataObject.statusIconColorClass)
            .prop('title', `Status: ${dataObject.status}`)

        $('#file_status_' + id).removeClass('tree-icon-offTime tree-icon-ok tree-icon-warning tree-icon-error')
            .addClass(dataObject.statusIconColorClass)
            .prop('title', `Status: ${dataObject.status}`)

        $('#file_name_' + id).text(dataObject.fileNameString)

        $("#newValuesCount").empty().html(dataObject.newValuesCount);
        if (dataObject.newValuesCount != null && $(`#link_table_${id}`).hasClass("active")) {
            $("#tableHistoryRefreshButton").removeClass("d-none");
        }

        const $errorInfo = $(`#errorInfo_${id}`);
        const isError = dataObject.status === 'Error';

        $errorInfo
            .toggleClass('d-none', !isError)
            .toggleClass('d-flex', isError);

        if (isError) {
            $errorInfo.html(`${dataObject.status}: ${dataObject.validationError}`);
        }

    }

    function updateGeneralInfo(selectedNodeId) {
        $.ajax({
            type: 'GET',
            url: `@Url.Action(nameof(HomeController.GetGeneralInfo))?selectedId=${selectedNodeId}`,
            cache: false,
            async: true,
            success: function (viewdata) {
                $('#meta_info_general_info').empty().replaceWith(viewdata);
            }
        });
    }

    function updateAlertIcons(selectedNodeId) {
        $.ajax({
            type: 'GET',
            url: `@Url.Action(nameof(HomeController.GetAlertIcons))?selectedId=${selectedNodeId}`,
            cache: false,
            async: true,
            success: function (viewdata) {
                $(`#alertIcons_${selectedNodeId}`).empty().append(viewdata);
            }
        });
    }

    function updateSpecificSensorData(dataObject) {
        var id = dataObject.id;
        let isFile = dataObject.sensorType === 6;

        $('#value_' + id).empty().append(dataObject.value);
        $('#validation_' + id).empty();

        if (isFile) {
            $(`#last_file_name_${id}`).empty().append(dataObject.fileNameString);

            if (dataObject.comment !== null)
                $('#validation_' + id).append(`<span class="d-flex text-break">Comment: ${dataObject.comment}</span>`);
        }

        if (dataObject.isValidationErrorVisible) {
            $('#validation_' + id).append(`<li id='errorIcon_${id}' class='fas fa-exclamation-triangle me-1'></li>
                                           <span>Status comment: ${dataObject.validationError}</span>`);

            $('#markdown_status_comment').children().last().css('margin-bottom', 0);
        }

        let accordionLoaded = $('[id^="sensorData"]');

        if (accordionLoaded.length !== 0) {
            if (isFile && dataObject.sendingTime !== null) {
                $('#side_info_' + id).empty().append(`<span>Size: ${dataObject.size}</span>
                                                      <span>${dataObject.sendingTime}</span>`);
            }

            if (isFile)
                setContentPreview(id);
        }
    }

    var updateSelectedNodeDataTimeoutId;
    function updateSelectedNodeData() {
        clearTimeout(updateSelectedNodeDataTimeoutId);

        var selectedNodeId = currentSelectedNodeId;

        //console.log('updateSelectedNodeData selectedNodeId=', selectedNodeId);

        if (selectedNodeId != "")
            $.ajax({
                type: 'POST',
                url: updateSelectedNode + '?Selected=' + selectedNodeId,
                dataType: 'html',
                contentType: 'application/json',
                cache: false,
                async: true
            }).done(function (sensorsData) {
                if (sensorsData === '')
                    return;
                
                let data = JSON.parse(sensorsData)
                let displayChildrenInfo = false;

                updateNodeData(data);

                if (data.value !== null && data.value !== undefined)
                    displayChildrenInfo = true;

                if (data.hasOwnProperty('value')) {
                    updateSpecificSensorData(data);
                }

                let accordionName = "";
                let dataPanel = $('#dataPanel li a.active');
                if (dataPanel.length > 0) {
                    if (dataPanel[0].innerText === ' Grid') {
                        accordionName = "grid"
                        getGridPage(`${accordionName}Sensors`)
                        getGridPage(`${accordionName}Nodes`)
                    }

                    if (dataPanel[0].innerText === ' List') {
                        accordionName = "list";
                        getListPage(`${accordionName}Sensors`)
                        getListPage(`${accordionName}Nodes`)
                    }
                }

                updateAlertIcons(selectedNodeId);

                let isDisplayMode = $("#description").hasClass("d-none");
                if (isDisplayMode) {
                    updateGeneralInfo(selectedNodeId);
                }

                if (displayChildrenInfo)
                    $('#dataPanel').removeClass('d-none');
            });

        $('#updateTime').empty();
        $('#updateTime').append('Update Time: ' + new Date().toUTCString());
    }

    function getGridPage(accordionId, pageNumber = -1, pageSize = -1) {
        let accordion = $(`#grid-accordion_${accordionId}`);

        $.ajax({
            type: 'get',
            url: `${getGrid}?typeId=${accordionId}&currentPage=${pageNumber}&pageSize=${pageSize}`,
            datatype: 'html',
            contenttype: 'application/json',
            cache: false,
            success: function (viewData) {
                let grid = $(`#grid-accordion_${accordionId}`);
                if (viewData !== '') {
                    let currInput = $(`#pageSize_${accordionId}`);
                    let [wasFocused, lastValue] = getFocusAndVal(currInput);
                    accordionId = accordion.length !== 0 ? accordionId : 'gridProducts';

                    grid.parent().find('.children-no-data').addClass('d-none');
                    grid.empty().replaceWith(viewData);

                    if (pageNumber === -1 || pageSize === -1)
                        setPaginationFocus(accordionId, wasFocused, lastValue, $(`#pageSize_${accordionId}`))
                }
            }
        });
    }

    function getListPage(accordionId, pageNumber = -1, pageSize = -1) {
        let accordion = $(`#list-accordion_${accordionId}`);

        $.ajax({
            type: 'get',
            url: `${getList}?typeId=${accordionId}&currentPage=${pageNumber}&pageSize=${pageSize}`,
            datatype: 'html',
            contenttype: 'application/json',
            cache: false,
            success: function (viewData) {
                let list = $(`#list-accordion_${accordionId}`);
                if (viewData !== '') {
                    let currInput = $(`#pageSize_${accordionId}`);
                    let [wasFocused, lastValue] = getFocusAndVal(currInput);
                    accordionId = accordion.length !== 0 ? accordionId : 'listProducts';

                    list.parent().find('.children-no-data').addClass('d-none');
                    list.empty().replaceWith(viewData);

                    if (pageNumber === -1 || pageSize === -1)
                        setPaginationFocus(accordionId, wasFocused, lastValue, $(`#pageSize_${accordionId}`))
                }
            }
        });
    }

    function setPaginationFocus(accordionId, wasFocused, lastValue, currInput) {
        if (wasFocused)
            currInput.focus();

        if (lastValue !== undefined)
            currInput.val(lastValue)
    }

    function getFocusAndVal(input) {
        return [input.is(':focus'), input.val()]
    }
</script>