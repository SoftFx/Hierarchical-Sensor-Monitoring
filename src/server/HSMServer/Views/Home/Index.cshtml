@using HSMServer.Constants
@using HSMServer.Controllers
@using HSMServer.Core.Model
@using HSMServer.Core.Model.Authentication
@using HSMServer.Core.Model.UserFilters
@using HSMServer.Helpers;
@using HSMServer.Model.TreeViewModels
@using HSMServer.Model
@using HSMServer.Model.ViewModel

@model HSMServer.Model.TreeViewModels.TreeViewModel

@{
    var user = User as User;

    ViewData["Title"] = "Tree";
}

<script>
    var updateSelectedNode = "@Html.Raw(Url.Action(ViewConstants.UpdateSelectedNodeAction, ViewConstants.HomeController))";
    var getFileAction = "@Html.Raw(Url.Action(ViewConstants.GetFileAction, ViewConstants.HomeController))";
    var viewFileAction = "@Html.Raw(Url.Action(ViewConstants.GetFileStreamAction, ViewConstants.HomeController))";
    var selected = "";

    var selectNode = "@Html.Raw(Url.Action(ViewConstants.SelectNodeAction, ViewConstants.HomeController))";
    var refreshTree = "@Html.Raw(Url.Action(ViewConstants.RefreshTreeAction, ViewConstants.HomeController))";

    var changeSensorState = "@Html.Raw(Url.Action(nameof(HomeController.ChangeSensorState), ViewConstants.HomeController))";
    var removeNode = "@Html.Raw(Url.Action(ViewConstants.RemoveNodeAction, ViewConstants.HomeController))";

    var enableNotifications = "@Html.Raw(Url.Action(nameof(HomeController.EnableNotifications), ViewConstants.HomeController))";
    var disableNotifications = "@Html.Raw(Url.Action(nameof(HomeController.DisableNotifications), ViewConstants.HomeController))";
    var ignoreNotifications = "@Html.Raw(Url.Action(nameof(HomeController.IgnoreNotifications), ViewConstants.HomeController))";
    var removeIgnoringNotifications = "@Html.Raw(Url.Action(nameof(HomeController.RemoveIgnoringNotifications), ViewConstants.HomeController))";

    var historyAllAction = "@Html.Raw(Url.Action(ViewConstants.HistoryAllAction, ViewConstants.HomeController))";
    var historyAction = "@Html.Raw(Url.Action(ViewConstants.HistoryAction, ViewConstants.HomeController))";

    var rawHistoryAction = "@Html.Raw(Url.Action(ViewConstants.RawHistoryAction, ViewConstants.HomeController))";
    var rawHistoryAllAction = "@Html.Raw(Url.Action(ViewConstants.RawHistoryAllAction, ViewConstants.HomeController))";

    var historyLatestAction = "@Html.Raw(Url.Action(ViewConstants.HistoryLatestAction, ViewConstants.HomeController))";
    var rawHistoryLatestAction = "@Html.Raw(Url.Action(ViewConstants.RawHistoryLatestAction, ViewConstants.HomeController))";

    var exportHistoryAction = "@Html.Raw(Url.Action(ViewConstants.ExportHistoryAction, ViewConstants.HomeController))";
    var exportHistoryAllAction = "@Html.Raw(Url.Action(ViewConstants.ExportHistoryAllAction, ViewConstants.HomeController))";

    var getSensorInfoAction = "@Html.Raw(Url.Action(ViewConstants.GetSensorInfoAction, ViewConstants.HomeController))";
    var updateSensorInfoAction = "@Html.Raw(Url.Action(ViewConstants.UpdateSensorInfoAction, ViewConstants.HomeController))";

    var getPath = "@Html.Raw(Url.Action(nameof(HomeController.GetPath), ViewConstants.HomeController))";
    var editProduct = "@Html.Raw(Url.Action(ViewConstants.EditProductAction, ViewConstants.ProductController))";
</script>

<link rel="stylesheet" href="~/js/jstree/themes/default/style.min.css" />
<link rel="stylesheet" href="~/css/bundles/homeBundle.min.css" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.17/d3.min.js"></script>

<script src="/js/signalr/dist/browser/signalr.min.js"></script>
<script src="~/js/bundles/homeBundle.min.js"></script>
<script src="~/js/plotly.js/plotly.min.js"></script>
<script src="~/js/jstree/jstree.min.js"></script>
<script src="~/moment.js/moment.min.js"></script>

<div class="modal fade" id="modalDelete" tabindex="-1" aria-labelledby="modalDeleteLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalDeleteLabel">Remove product</h5>
            </div>

            <div id="modalDeleteBody" class="modal-body">
            </div>

            <div class="modal-footer">
                <button id="confirmDeleteButton" type="button" class="btn btn-secondary">Ok</button>
                <button id="closeDeleteButton" type="button" class="btn btn-secondary" data-bs-dismiss="modalDelete">Cancel</button>

            </div>
        </div>
    </div>
</div>

@await Html.PartialAsync("~/Views/AccessKeys/_AccessKeysModal.cshtml")

<div id="ignoreNotificatios_partial">@await Html.PartialAsync("_IgnoreNotificationsModal", (IgnoreNotificationsViewModel)null)</div>

<div id="mainContainer">
    <div>
        <div class="d-flex">
            <div class="d-flex me-auto">
                <button id="show" type="button" class="btn btn-sm btn-secondary mt-1 ms-4">
                    <i class="fa-solid fa-filter"></i> Filters (@(user.TreeFilter.EnabledFiltersCount))
                </button>

                <div class="mx-3 my-2">
                    <i id="currentSort" class="@(user.TreeFilter.TreeSortType == TreeSortType.ByTime ? "fas fa-sort-numeric-down-alt" : "fas fa-sort-alpha-down")"></i>
                </div>
            </div>

            <div class="col-auto me-1">
                <div id="state"></div>
            </div>

            <div class="col-auto me-3">
                <div id="updateTime"></div>
            </div>
        </div>
    </div>

    <div class="container mw-100 d-inline-flex flex-wrap flex-lg-nowrap mt-1">
        <div class="ms-2 mb-1"> @await Html.PartialAsync("_TreeFilter.cshtml", new UserFilterViewModel(user.TreeFilter)) </div>

        <div class=" row justify-content-start mw-100 me-1">
            <div class="scrollableBlock col-auto ms-2">
                <div id="treeContainer">
                    <div class="col-md-auto">
                        <div id="jstree">@await Html.PartialAsync("_Tree", Model)</div>
                    </div>
                </div>
            </div>

        </div>
        <div id="listSensors" class="flex-grow-1">@await Html.PartialAsync("_NodeDataPanel", (NodeViewModel)null)</div>
    </div>
</div>


<script>
    initializeTree();
    initializeUserRights('@(user.IsAdmin)',
                         '@(string.Join(' ', user.GetManagerProducts().Select(SensorPathHelper.Encode)))');
    initialize();
    updateTreeTimer();

    $("#state").empty();
    $("#state").append("<span style='color: green' value='Connection successful'><i class='fas fa-wifi'></i></span>");

    $("#show").click(function () {
        if (!$("#filter").is(":visible"))
            $("#filter").css("display", "block");
        else
            $("#filter").css("display", "none");
    });

    function getSelectedNodeId(selectedNode) {
        let selectedNodeId = "";

        if (selectedNode != undefined) {
            selectedNodeId = selectedNode.id;
        }

        return selectedNodeId;
    }

    function updateSelectedSensor(dataObject) {
        var id = dataObject.id;

        $('#value_' + id).empty().append(dataObject.value);
        $('#update_' + id).empty().append(dataObject.updatedTimeStr);

        $('#status_' + id).removeClass('tree-icon-unknown tree-icon-ok tree-icon-warning tree-icon-error tree-icon-unknown');
        $('#status_' + id).addClass(dataObject.statusColorClass);
        $('#status_' + id).prop('title', `Status: ${dataObject.status}`);

        $('#validation_' + id).empty();
        if (dataObject.validationError != null && dataObject.validationError != "") {
            $('#validation_' + id).append(`<li id='errorIcon_${id}' class='fas fa-exclamation-triangle' style='margin-right:5px' title='${dataObject.validationError}'></li>`);
        }
    }

    function updateTreeTimer() {
        $.ajax({
            type: 'POST',
            url: refreshTree,
            dataType: 'html',
            contentType: 'application/json',
            cache: false,
            async: true
        }).done(function (treeData) {
            let jHtml_treeData = jQuery(treeData);  // get treeData jquery

            // remove all nodes with 0 visible sensors - <li>, that have child <span class="nodeSensorsCount-span"> with text: (0/.. sensors)
            jHtml_treeData.find(".nodeSensorsCount-span").each(function () {
                if ($(this).text().startsWith("(0/")) {
                    $(this).parent().remove();
                }
            });

            $('#jstree').jstree(true).settings.core.data = jHtml_treeData.html();
            $('#jstree').jstree(true).refresh(true);
        });
    }

    function updateSelectedSensors() {
        var selectedNode = $('#jstree').jstree().get_selected(true)[0];
        var selectedNodeId = getSelectedNodeId(selectedNode);

        if (selectedNodeId != "")
            $.ajax({
                type: 'POST',
                url: updateSelectedNode + '?Selected=' + selectedNodeId,
                dataType: 'html',
                contentType: 'application/json',
                cache: false,
                async: true
            }).done(function (sensorsData) {
                var array = JSON.parse(sensorsData);
                for (let i = 0; i < array.length; i++) {
                    updateSelectedSensor(array[i]);

                    let selectedRadio = $('input[id$=' + array[i].id + ']:checked');
                    if (selectedRadio !== undefined) {
                        selectedRadio.click();
                    }
                }

                initialize();
            });

        $('#updateTime').empty();
        $('#updateTime').append('Update Time: ' + new Date().toUTCString());

        $("#state").empty();
        $("#state").append("<span style='color: green' value='Connection successful'><i class='fas fa-wifi'></i></span>");
    }

    var interval = $("#treeInterval").val() * 1000;
    setInterval(updateTreeTimer, interval);
    setInterval(updateSelectedSensors, interval);
</script>