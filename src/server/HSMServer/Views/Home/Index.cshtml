@using HSMServer.Constants
@using HSMServer.Controllers
@using HSMServer.Model.Authentication
@using HSMServer.Model
@using HSMServer.Model.ViewModel
@using HSMServer.Model.TreeViewModel
@using HSMServer.UserFilters

@model TreeViewModel

@{
    var user = User as User;

    ViewData["Title"] = "Home";
}

<script>
    var updateSelectedNode = "@Url.Action(nameof(HomeController.UpdateSelectedNode), ViewConstants.HomeController)";
    var getFileAction = "@Url.Action(nameof(HomeController.GetFile), ViewConstants.HomeController)";
    var viewFileAction = "@Url.Action(nameof(HomeController.GetFileStream), ViewConstants.HomeController)";
    var getFileInfo = "@Url.Action(nameof(HomeController.GetFileInfo), ViewConstants.HomeController)";
    var selected = "";

    var selectNode = "@Url.Action(nameof(HomeController.SelectNode), ViewConstants.HomeController)";
    var refreshTree = "@Url.Action(nameof(HomeController.RefreshTree), ViewConstants.HomeController)";
    var getNode = "@Url.Action(nameof(HomeController.GetNode), ViewConstants.HomeController)";
    var closeNode = "@Url.Action(nameof(HomeController.RemoveRenderingNode), ViewConstants.HomeController)";

    var historyLatestAction = "@Url.Action(nameof(SensorHistoryController.TabelHistoryLatest), ViewConstants.HistoryController)";
    var historyAction = "@Url.Action(nameof(SensorHistoryController.TableHistory), ViewConstants.HistoryController)";
    var nextPageAction = "@Url.Action(nameof(SensorHistoryController.GetNextTablePage), ViewConstants.HistoryController)";
    var prevPageAction = "@Url.Action(nameof(SensorHistoryController.GetPreviousTablePage), ViewConstants.HistoryController)";

    var rawHistoryLatestAction = "@Url.Action(nameof(SensorHistoryController.ChartHistoryLatest), ViewConstants.HistoryController)";
    var rawHistoryAction = "@Url.Action(nameof(SensorHistoryController.ChartHistory), ViewConstants.HistoryController)";
    var exportHistoryAction = "@Url.Action(nameof(SensorHistoryController.ExportHistory), ViewConstants.HistoryController)";
    var reloadRequest = "@Url.Action(nameof(SensorHistoryController.ReloadHistoryRequest), ViewConstants.HistoryController)";

    var getNodePathAction = "@Url.Action(nameof(HomeController.GetNodePath), ViewConstants.HomeController)";
    var editProductAction = "@Url.Action(nameof(ProductController.EditProduct), ViewConstants.ProductController)";
    var removeNodeAction = "@Url.Action(nameof(HomeController.RemoveNode), ViewConstants.HomeController)";
    var clearHistoryAction = "@Url.Action(nameof(HomeController.ClearHistoryNode), ViewConstants.HomeController)";

    var editFolderAction = "@Url.Action(nameof(FoldersController.EditFolder), ViewConstants.FoldersController)";

    var enableGrafanaAction = "@Url.Action(nameof(HomeController.EnableGrafana), ViewConstants.HomeController)";
    var disableGrafanaAction = "@Url.Action(nameof(HomeController.DisableGrafana), ViewConstants.HomeController)";
    var enableNotificationsAction = "@Url.Action(nameof(HomeController.EnableNotifications), ViewConstants.HomeController)";
    var ignoreNotificationsAction = "@Url.Action(nameof(HomeController.IgnoreNotifications), ViewConstants.HomeController)";
    var unmuteAction = "@Url.Action(nameof(HomeController.RemoveMutedStateToSensor), ViewConstants.HomeController)";

    var isDataValidAction = "@Url.Action(nameof(HomeController.IsMetaInfoValid), ViewConstants.HomeController)";
    
    var getGrid = `@Url.Action(nameof(HomeController.GetGrid))`;
    var getList = `@Url.Action(nameof(HomeController.GetList))`;
</script>


<div class="modal fade" id="modalDelete" tabindex="-1" aria-labelledby="modalDeleteLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content" style="display: inline-table">
            <div class="modal-header">
                <h5 class="modal-title" id="modalDeleteLabel">Remove product</h5>
            </div>

            <div id="modalDeleteBody" class="modal-body text-break">
            </div>

            <div class="modal-footer">
                <button id="confirmDeleteButton" type="button" class="btn btn-secondary col-2">OK</button>
                <button id="closeDeleteButton" type="button" class="btn btn-secondary col-2" data-bs-dismiss="modalDelete">Cancel</button>
            </div>
        </div>
    </div>
</div>

@await Html.PartialAsync("~/Views/AccessKeys/_AccessKeysModal.cshtml")
@await Html.PartialAsync("_AlertsModal", new EditAlertsViewModel())
@await Html.PartialAsync("~/Views/Shared/_ConfirmationModal.cshtml")

<div id="ignoreNotificatios_partial">@await Html.PartialAsync("_IgnoreNotificationsModal", (IgnoreNotificationsViewModel)null)</div>

<div id="mainSpinner" class="spinner-border big_spinner text-secondary center_spinner" role="status"></div>

<div id="mainContainer" class="container tree-main-container mw-100 d-inline-flex flex-nowrap hidden_element m-0 p-0">
    <div>
        <div class="d-flex pt-3 pb-1">
            <div class="d-flex flex-fill me-auto">
                <button id="show" type="button" class="btn btn-sm btn-outline-primary ms-3 position-relative" style="height: 2.5rem">
                    <i class="fa-solid fa-filter"></i>
                    Filters
                    @if (user?.TreeFilter.EnabledFiltersCount > 0)
                    {
                        <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
                            @(user.TreeFilter.EnabledFiltersCount)
                        </span>
                    }

                </button>
                <div class="mx-3 my-2">
                    <i id="currentSort" class="@(user?.TreeFilter.TreeSortType == TreeSortType.ByTime ? "fas fa-sort-numeric-down-alt" : "fas fa-sort-alpha-down")"></i>
                </div>
                @if (user?.TreeFilter.EnabledFiltersCount > 0)
                {
                    <span class="enabled-filters-message text-break">@user.TreeFilter.EnabledFiltersMessage</span>
                }
                <div class="flex-fill align-self-center text-end">
                    <i id="collapseIcon" onclick="collapseTree()" class="fa-regular fa-square-minus tree-collapse-button" title="Save and close tree"></i>
                </div>
            </div>
        </div>
        <div class="d-flex justify-content-center tree-wrapper reserved-scroll-y overflow-y-auto">
            <div class="d-flex me-auto">
                <div class="ms-2 mb-1"> @await Html.PartialAsync("_TreeFilter.cshtml", new UserFilterViewModel(user.TreeFilter)) </div>

                <div class="row justify-content-start mw-100 me-1">
                    <div class="tree-height-weight-parameters col-auto ms-2 pe-0">
                        <div class="col-md-auto">
                            <div id="jstree">@await Html.PartialAsync("_Tree", user.Tree.GetUserTree())</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="flex-grow-1 reserved-scroll-y overflow-y-auto">
        <div class="d-none" id="nodeDataSpinner">
            <div class="d-flex justify-content-center align-items-center center_relative_spinner">
                <div class="spinner-border normal_spinner text-secondary" role="status"></div>
            </div>
        </div>

        <div id="nodeDataPanel" class="hidden_element">@await Html.PartialAsync("_NodeDataPanel", (NodeViewModel)null)</div>
    </div>
</div>


<script>
    initializeTree();
    initialize();

    $(document).ready(() => {
        $('#updateTime').empty().append('Update Time: ' + new Date().toUTCString());
    })

    $(window).on('load', function () {
        $('body').css('overflow', 'hidden');
    })
        .on('unload', function () {
            $('body').css('overflow', 'auto');
        });

    var interval = $("#treeInterval").val() * 1000;

    setTimeout(updateTreeTimer, interval);
    setTimeout(updateSelectedNodeData, interval);


    $("#show").click(function () {
        if (!$("#filter").is(":visible"))
            $("#filter").css("display", "block");
        else
            $("#filter").css("display", "none");
    });

    $("#mainSpinner").css("display", "none");
    $('#mainContainer').removeClass('hidden_element');

    function updateGridCell(dataObject) {
        var id = dataObject.id;

        $('#gridCell_' + id).removeClass('grid-cell-offTime grid-cell-ok grid-cell-warning grid-cell-error');
        $('#gridCell_' + id).addClass(dataObject.gridCellColorClass);
        $('#gridCell_' + id).prop('title', dataObject.tooltip);
    }

    function updateNodeData(dataObject) {
        var id = dataObject.id;

        if (dataObject.sensorType !== 6)
            $('#update_' + id).empty().append(dataObject.updatedTimeStr);

        $('#status_' + id).removeClass('tree-icon-offTime tree-icon-ok tree-icon-warning tree-icon-error')
                          .addClass(dataObject.statusIconColorClass)
                          .prop('title', `Status: ${dataObject.status}`)

        $('#metainfo_icon_status').removeClass('tree-icon-offTime tree-icon-ok tree-icon-warning tree-icon-error')
                                  .addClass(dataObject.statusIconColorClass)
                                  .prop('title', `Status: ${dataObject.status}`);
        
        $('#file_status_' + id).removeClass('tree-icon-offTime tree-icon-ok tree-icon-warning tree-icon-error')
                               .addClass(dataObject.statusIconColorClass)
                               .prop('title', `Status: ${dataObject.status}`)
        
        $('#status_name_' + id).empty().html(dataObject.status);

        $("#newValuesCount").empty().html(dataObject.newValuesCount);
        if (dataObject.newValuesCount != null && $(`#link_table_${id}`).hasClass("active")) {
            $("#tableHistoryRefreshButton").removeClass("d-none");
        }
    }
    
    function updateGeneralInfo(selectedNodeId) {
        $.ajax({
            type: 'GET',
            url: `@Url.Action(nameof(HomeController.GetGeneralInfo))?selectedId=${selectedNodeId}`,
            cache: false,
            async: true,
            success: function (viewdata) {
                $('#meta_info_general_info').empty().replaceWith(viewdata);
            }
        });
    }

    function updateSpecificSensorData(dataObject) {
        var id = dataObject.id;
        let isFile = dataObject.sensorType === 6;

        $('#value_' + id).empty().append(dataObject.value);
        $('#validation_' + id).empty();
        $('#validation_metainfo').empty();

        if (isFile) {
            $(`#last_file_name_${id}`).empty().append(dataObject.fileNameString);

            if (dataObject.comment !== null)
                $('#validation_' + id).append(`<span class="d-flex text-break">Comment: ${dataObject.comment}</span>`);
        }

        if (dataObject.isValidationErrorVisible) {
            $('#validation_' + id).append(`<li id='errorIcon_${id}' class='fas fa-exclamation-triangle me-1'></li>
                                               <span>Status comment: ${dataObject.validationError}</span>`);
            $('#validation_metainfo').append(`<div class="d-flex ms-3 text-nowrap">
                                                       <span style="min-width: 8rem">Status comment:</span>
                                                  </div>
                                                  <div class="d-flex w-100">
                                                        <span id="markdown_status_comment">${markdownToHTML(dataObject.validationError)}</span>
                                                  </div>`);

            $('#markdown_status_comment').children().last().css('margin-bottom', 0);
        }

        let accordionLoaded = $('[id^="sensorData"]');

        if (accordionLoaded.length !== 0) {
            if (isFile && dataObject.receivingTime !== null) {
                $('#side_info_' + id).empty().append(`<span>Size: ${dataObject.size}</span>
                                                           <span>${dataObject.receivingTime}</span>`);
            }

            if (isFile)
                setContentPreview(id);
        }
    }

    var refreshTreeTimeoutId;
    var isRefreshing = false;
    function updateTreeTimer() {
        clearTimeout(refreshTreeTimeoutId);
        isRefreshing = true;

        $('#jstree').jstree(true).refresh(true);

        isRefreshing = false;
    }

    var updateSelectedNodeDataTimeoutId;
    function updateSelectedNodeData() {
        clearTimeout(updateSelectedNodeDataTimeoutId);

        var selectedNodeId = currentSelectedNodeId;
        if (selectedNodeId != "")
            $.ajax({
                type: 'POST',
                url: updateSelectedNode + '?Selected=' + selectedNodeId,
                dataType: 'html',
                contentType: 'application/json',
                cache: false,
                async: true
            }).done(function (sensorsData) {
                var array = JSON.parse(sensorsData);
                let displayChildrenInfo = false;

                for (let i = 0; i < array.length; i++) {
                    let dataObject = array[i];

                    updateNodeData(dataObject);

                    if (dataObject.value !== null && dataObject.value !== undefined)
                        displayChildrenInfo = true;
                    
                    if (dataObject.hasOwnProperty('value')) {
                        updateSpecificSensorData(dataObject);
                    }
                }
                
                let accordionName = "";
                let dataPanel = $('#dataPanel li a.active');
                if (dataPanel.length > 0) {
                    if (dataPanel[0].innerText === ' Grid') {
                        accordionName = "grid"
                        getGridPage(`${accordionName}Sensors`)
                        getGridPage(`${accordionName}Nodes`)
                    }

                    if (dataPanel[0].innerText === ' List') {
                        accordionName = "list";
                        getListPage(`${accordionName}Sensors`)
                        getListPage(`${accordionName}Nodes`)
                    }
                }
                

               updateGeneralInfo(selectedNodeId);
                
                if (displayChildrenInfo)
                    $('#dataPanel').removeClass('d-none');
            });

        $('#updateTime').empty();
        $('#updateTime').append('Update Time: ' + new Date().toUTCString());
    }

    var isTreeCollapsed = false;
    var state;
    function collapseTree() {
        if (!isTreeCollapsed) {
            isTreeCollapsed = true;
            state = $('#jstree').jstree('get_state');
            $('#jstree').jstree('close_all');

            $('#collapseIcon').removeClass('fa-regular fa-square-minus').addClass('fa-regular fa-square-plus').attr('title', 'Restore tree')
        }
        else {
            isTreeCollapsed = false;
            $('#jstree').jstree('set_state', state);

            $('#collapseIcon').removeClass('fa-regular fa-square-plus').addClass('fa-regular fa-square-minus').attr('title', 'Save and close tree');
        }
    }

    var clipboard = new ClipboardJS('[id^="copy_"]', {
        container: document.getElementById('accessKeys_modal')
    });
    
    function getGridPage(accordionId, pageNumber = -1, pageSize = -1){
        let accordion  = $(`#grid-accordion_${accordionId}`);
        
        $.ajax({
            type: 'get',
            url: `${getGrid}?typeId=${accordionId}&currentPage=${pageNumber}&pageSize=${pageSize}`,
            datatype: 'html',
            contenttype: 'application/json',
            cache: false,
            success: function (viewData) {
                if (viewData !== '') {
                    let currInput = $(`#pageSize_${accordionId}`);
                    let [wasFocused, lastValue] = getFocusAndVal(currInput);
                    accordionId = accordion.length !== 0 ? accordionId : 'gridProducts';
 
                    $(`#grid-accordion_${accordionId}`).empty().replaceWith(viewData);
                    
                    if (pageNumber === -1 || pageSize === -1)
                        setPaginationFocus(accordionId, wasFocused, lastValue, $(`#pageSize_${accordionId}`))
                }
            }
        });
    }
    
    function getListPage(accordionId, pageNumber = -1, pageSize = -1){
        let accordion  = $(`#list-accordion_${accordionId}`);
        
        $.ajax({
            type: 'get',
            url: `${getList}?typeId=${accordionId}&currentPage=${pageNumber}&pageSize=${pageSize}`,
            datatype: 'html',
            contenttype: 'application/json',
            cache: false,
            success: function (viewData) {
                if (viewData !== '') {
                    let currInput = $(`#pageSize_${accordionId}`);
                    let [wasFocused, lastValue] = getFocusAndVal(currInput);
                    accordionId = accordion.length !== 0 ? accordionId : 'listProducts';

                    $(`#list-accordion_${accordionId}`).empty().replaceWith(viewData);
                    
                    if (pageNumber === -1 || pageSize === -1)
                        setPaginationFocus(accordionId, wasFocused, lastValue, $(`#pageSize_${accordionId}`))
                }
            }
        });
    }
    
    function setPaginationFocus(accordionId, wasFocused, lastValue, currInput) {
        if (wasFocused)
           currInput.focus();
        
        if (lastValue !== undefined)
           currInput.val(lastValue)
    }
    
    function getFocusAndVal(input) {
        return [input.is(':focus'), input.val()]
    }
</script>
