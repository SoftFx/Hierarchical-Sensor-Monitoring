@using HSMServer.Constants
@using HSMServer.Controllers
@using HSMServer.Model.Authentication
@using HSMServer.Core.Model.UserFilters
@using HSMServer.Model
@using HSMServer.Model.ViewModel
@using HSMServer.Model.TreeViewModel

@model TreeViewModel

@{
    var user = User as User;

    ViewData["Title"] = "Tree";
}

<script>
    var updateSelectedNode = "@Html.Raw(Url.Action(ViewConstants.UpdateSelectedNodeAction, ViewConstants.HomeController))";
    var getFileAction = "@Html.Raw(Url.Action(ViewConstants.GetFileAction, ViewConstants.HomeController))";
    var viewFileAction = "@Html.Raw(Url.Action(ViewConstants.GetFileStreamAction, ViewConstants.HomeController))";
    var selected = "";

    var selectNode = "@Html.Raw(Url.Action(ViewConstants.SelectNodeAction, ViewConstants.HomeController))";
    var refreshTree = "@Html.Raw(Url.Action(ViewConstants.RefreshTreeAction, ViewConstants.HomeController))";

    var historyLatestAction = "@Html.Raw(Url.Action(nameof(HomeController.HistoryLatest), ViewConstants.HomeController))";
    var historyAction = "@Html.Raw(Url.Action(ViewConstants.HistoryAction, ViewConstants.HomeController))";
    var nextPageAction = "@Html.Raw(Url.Action(nameof(HomeController.GetNextPage), ViewConstants.HomeController))";
    var prevPageAction = "@Html.Raw(Url.Action(nameof(HomeController.GetPreviousPage), ViewConstants.HomeController))";

    var rawHistoryLatestAction = "@Html.Raw(Url.Action(nameof(HomeController.RawHistoryLatest), ViewConstants.HomeController))";
    var rawHistoryAction = "@Html.Raw(Url.Action(ViewConstants.RawHistoryAction, ViewConstants.HomeController))";
    var exportHistoryAction = "@Html.Raw(Url.Action(ViewConstants.ExportHistoryAction, ViewConstants.HomeController))";

    var getSensorInfoAction = "@Html.Raw(Url.Action(ViewConstants.GetSensorInfoAction, ViewConstants.HomeController))";
    var updateSensorInfoAction = "@Html.Raw(Url.Action(ViewConstants.UpdateSensorInfoAction, ViewConstants.HomeController))";

    var getNodePathAction = "@Url.Action(nameof(HomeController.GetNodePath), ViewConstants.HomeController)";
    var editProductAction = "@Url.Action(nameof(ProductController.EditProduct), ViewConstants.ProductController)";
    var removeNodeAction = "@Url.Action(nameof(HomeController.RemoveNode), ViewConstants.HomeController)";
    var clearHistoryAction = "@Url.Action(nameof(HomeController.ClearHistoryNode), ViewConstants.HomeController)";

    var enableNotificationsAction = "@Url.Action(nameof(HomeController.EnableNotifications), ViewConstants.HomeController)";
    var ignoreNotificationsAction = "@Url.Action(nameof(HomeController.IgnoreNotifications), ViewConstants.HomeController)";
    var removeIgnoreStateAction = "@Url.Action(nameof(HomeController.RemoveIgnoreStateToSensor), ViewConstants.HomeController)";
</script>


<div class="modal fade" id="modalDelete" tabindex="-1" aria-labelledby="modalDeleteLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content" style="display: inline-table">
            <div class="modal-header">
                <h5 class="modal-title" id="modalDeleteLabel">Remove product</h5>
            </div>

            <div id="modalDeleteBody" class="modal-body text-break">
            </div>

            <div class="modal-footer">
                <button id="confirmDeleteButton" type="button" class="btn btn-secondary col-2">OK</button>
                <button id="closeDeleteButton" type="button" class="btn btn-secondary col-2" data-bs-dismiss="modalDelete">Cancel</button>
            </div>
        </div>
    </div>
</div>

@await Html.PartialAsync("~/Views/AccessKeys/_AccessKeysModal.cshtml")

<div id="ignoreNotificatios_partial">@await Html.PartialAsync("_IgnoreNotificationsModal", (IgnoreNotificationsViewModel)null)</div>

<div id="mainSpinner" class="spinner-border big_spinner text-secondary center_spinner" role="status"></div>

<div id="mainContainer" class="container mw-100 d-inline-flex flex-wrap flex-lg-nowrap mt-1 hidden_element ms-0 ps-0">
    <div>
        <div class="d-flex my-1">
            <div class="d-flex me-auto">
                <button id="show" type="button" class="btn btn-sm btn-outline-primary ms-4 position-relative" style="height: 2.5rem">
                    <i class="fa-solid fa-filter"></i>
                    Filters
                    @if (user?.TreeFilter.EnabledFiltersCount > 0)
                    {
                        <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
                            @(user.TreeFilter.EnabledFiltersCount)
                        </span>
                    }

                </button>
                <div class="mx-3 my-2">
                    <i id="currentSort" class="@(user?.TreeFilter.TreeSortType == TreeSortType.ByTime ? "fas fa-sort-numeric-down-alt" : "fas fa-sort-alpha-down")"></i>
                </div>
                @if (user?.TreeFilter.EnabledFiltersCount > 0)
                {
                    <span class="enabled-filters-message text-break">@user.TreeFilter.EnabledFiltersMessage</span>
                }
            </div>
        </div>
        <div class="d-flex justify-content-center">
            <div class="d-flex me-auto">
                <div class="ms-2 mb-1"> @await Html.PartialAsync("_TreeFilter.cshtml", new UserFilterViewModel(user.TreeFilter)) </div>

                <div class="row justify-content-start mw-100 me-1">
                    <div class="scrollableBlock col-auto ms-2">
                        <div class="col-md-auto">
                            <div id="jstree">@await Html.PartialAsync("_Tree", Model.GetUserTree(user))</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="flex-grow-1 my-1 me-1">
        <div class="d-none" id="nodeDataSpinner">
            <div class="d-flex justify-content-center align-items-center center_relative_spinner">
                <div class="spinner-border normal_spinner text-secondary" role="status"></div>
            </div>
        </div>

        <div id="nodeDataPanel" class="hidden_element">"@await Html.PartialAsync("_NodeDataPanel", (NodeViewModel)null)</div>
    </div>
</div>


<script>
    initializeTree();
    initialize();


    var interval = $("#treeInterval").val() * 1000;

    setTimeout(updateTreeTimer, interval);
    setTimeout(updateSelectedNodeData, interval);


    $("#show").click(function () {
        if (!$("#filter").is(":visible"))
            $("#filter").css("display", "block");
        else
            $("#filter").css("display", "none");
    });

    $("#mainSpinner").css("display", "none");
    $('#mainContainer').removeClass('hidden_element');

    function getSelectedNodeId(selectedNode) {
        let selectedNodeId = "";

        if (selectedNode != undefined) {
            selectedNodeId = selectedNode.id;
        }

        return selectedNodeId;
    }

    function updateGridCell(dataObject) {
        var id = dataObject.id;

        $('#gridCell_' + id).removeClass('grid-cell-offTime grid-cell-ok grid-cell-warning grid-cell-error');
        $('#gridCell_' + id).addClass(dataObject.gridCellColorClass);
        $('#gridCell_' + id).prop('title', dataObject.tooltip);
    }

    function updateNodeData(dataObject) {
        var id = dataObject.id;

        $('#update_' + id).empty().append(dataObject.updatedTimeStr);
        $('#status_' + id).removeClass('tree-icon-offTime tree-icon-ok tree-icon-warning tree-icon-error');
        $('#status_' + id).addClass(dataObject.statusIconColorClass);
        $('#status_' + id).prop('title', `Status: ${dataObject.status}`);
    }

    function updateSpecificSensorData(dataObject) {
        var id = dataObject.id;

        $('#value_' + id).empty().append(dataObject.value);

        $('#validation_' + id).empty();
        if (dataObject.isValidationErrorVisible) {
            $('#validation_' + id).append(`<li id='errorIcon_${id}' class='fas fa-exclamation-triangle me-1' title='${dataObject.validationError}'></li>`);
        }
    }

    var refreshTreeTimeoutId;
    function updateTreeTimer() {
        clearTimeout(refreshTreeTimeoutId);

        $.ajax({
            type: 'POST',
            url: refreshTree,
            dataType: 'html',
            contentType: 'application/json',
            cache: false,
            async: true
        }).done(function (treeData) {
            $('#jstree').jstree(true).settings.core.data = treeData;
            $('#jstree').jstree(true).refresh(true);

            refreshTreeTimeoutId = setTimeout(updateTreeTimer, interval);
            updateSelectedNodeDataTimeoutId = setTimeout(updateSelectedNodeData, interval);
        });
    }

    var updateSelectedNodeDataTimeoutId;
    function updateSelectedNodeData() {
        clearTimeout(updateSelectedNodeDataTimeoutId);

        var selectedNode = $('#jstree').jstree().get_selected(true)[0];
        var selectedNodeId = getSelectedNodeId(selectedNode);
        if (selectedNodeId != "")
            $.ajax({
                type: 'POST',
                url: updateSelectedNode + '?Selected=' + selectedNodeId,
                dataType: 'html',
                contentType: 'application/json',
                cache: false,
                async: true
            }).done(function (sensorsData) {
                var array = JSON.parse(sensorsData);

                for (let i = 0; i < array.length; i++) {
                    let dataObject = array[i];

                    updateGridCell(dataObject);
                    updateNodeData(dataObject);

                    if (dataObject.hasOwnProperty('value')) {
                        updateSpecificSensorData(dataObject);
                    }
                }
            });

        $('#updateTime').empty();
        $('#updateTime').append('Update Time: ' + new Date().toUTCString());
    }

    var clipboard = new ClipboardJS('[id^="copy_"]', {
        container: document.getElementById('accessKeys_modal')
    });
</script>