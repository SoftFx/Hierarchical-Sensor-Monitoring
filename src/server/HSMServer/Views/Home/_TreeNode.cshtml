@using HSMServer.Extensions
@using HSMServer.Core.Model.Authentication

@model HSMServer.Model.TreeViewModels.ProductNodeViewModel

@{
    var user = User as User;
    var userNotifications = user.Notifications;

    user.InitNodeStates(Model.Id);

    var nodeState = user.NodeStates[Model.Id];
}


<li id='@Model.EncodedId' title='@Model.Tooltip' data-jstree='{"icon" : "@Model.Status.ToIcon()", "time" : "@Model.UpdateTime.ToDefaultFormat()"}'>@Model.GetShortName(Model.Name)
    @if (Model.Nodes != null)
        @foreach (var (_, child) in Model.Nodes)
        {
            <ul>@await Html.PartialAsync("_TreeNode", child)</ul>

            nodeState.ChangeSensorsCount(user.NodeStates[child.Id].FilteredSensorsCount);
            nodeState.ChangeEnableState(user.NodeStates[child.Id].IsAnyNotificationsEnabled);
            nodeState.ChangeIgnoreState(user.NodeStates[child.Id].IsAnyNotificationsIgnored);
        }
    
    @if ((Model.Sensors?.Count ?? 0) > 0)
    {
        <ul>
            @foreach (var (_, sensor) in Model.Sensors)
            {
                var isVisible = user.IsSensorVisible(sensor);
                nodeState.ChangeSensorsCount(isVisible ? 1 : 0);

                if (!isVisible)
                    continue;

                var isSensorNotificationsEnabled = userNotifications.EnabledSensors.Contains(sensor.Id);
                var isSensorNotificationsIgnored = userNotifications.IgnoredSensors.ContainsKey(sensor.Id);

                nodeState.ChangeEnableState(isSensorNotificationsEnabled);
                nodeState.ChangeIgnoreState(isSensorNotificationsIgnored);

                <li id='@sensor.EncodedId' title='@sensor.Tooltip' data-jstree='{"icon" : "@sensor.Status.ToIcon()", "time" : "@sensor.UpdateTime.ToDefaultFormat()"}'>@Model.GetShortName(sensor.Name)
                    @if (isSensorNotificationsIgnored)
                    {
                        <span>
                            <i id="@(sensor.EncodedId)_ignoreNotifications" class="fa-solid fa-bell-slash fa-xs"></i>
                        </span>
                    }
                    else if (isSensorNotificationsEnabled)
                    {
                        <span>
                            <i id="@(sensor.EncodedId)_notifications" class="fab fa-telegram fa-xs"></i>
                        </span>
                    }
                </li>
            }
        </ul>
    }

    (@(nodeState.FilteredSensorsCount == Model.AllSensorsCount ? Model.AllSensorsCount : $"{nodeState.FilteredSensorsCount}/{Model.AllSensorsCount}") sensors)
    @if (nodeState.IsAnyNotificationsIgnored)
    {
        <span>
            <i id="@(Model.EncodedId)_ignoreNotifications" class="fa-solid fa-bell-slash fa-xs"></i>
        </span>
    }
    else if (nodeState.IsAnyNotificationsEnabled)
    {
        <span>
            <i id="@(Model.EncodedId)_notifications" class="fab fa-telegram fa-xs"></i>
            <input id='@(Model.EncodedId)_partialNotifications' value='@((!nodeState.IsAllNotificationsEnabled).ToString())' style='display: none' />
        </span>
    }
</li>


<script type="text/javascript">
    if ('@nodeState.FilteredSensorsCount' === "0") {
        let node = document.getElementById('@Model.EncodedId');
        node.remove();
    }
</script>
