@using HSMCommon.Constants
@using HSMServer.Constants
@using HSMServer.Controllers
@using HSMServer.Model.ViewModel
@model Dictionary<string, ConfigurationViewModel>

@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

@{
    ViewData["Title"] = "Configuration";
}

<script>
    var setToDefaultAction = "@Html.Raw(Url.Action(nameof(ConfigurationController.SetToDefault), ViewConstants.ConfigurationController))";
    var saveAction = "@Html.Raw(Url.Action(nameof(ConfigurationController.SaveConfig), ViewConstants.ConfigurationController))";
    var restartBotAction = "@Html.Raw(Url.Action(nameof(ConfigurationController.RestartTelegramBot), ViewConstants.ConfigurationController))";
</script>

<style>
    .default-text-field {
        font-weight: normal;
        color: grey;
        font-size: inherit;
        margin-left: 1vh;
    }

    .config-name {
        margin-right: 1vh;
    }
</style>

<div class="container">
    <div class="row w-100 justify-content-center">
        <div class="d-flex justify-content-start my-3 p-0">
            <h5>Configuration parameters</h5>
        </div>

        <ul class="nav nav-tabs" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link active" id="server-tab" data-bs-toggle="tab" data-bs-target="#server" type="button" role="tab" aria-controls="server" aria-selected="true">Server</button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="monitoring-tab" data-bs-toggle="tab" data-bs-target="#monitoring" type="button" role="tab" aria-controls="monitoring" aria-selected="false">Self monitoring</button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="telegram-tab" data-bs-toggle="tab" data-bs-target="#telegram" type="button" role="tab" aria-controls="telegram" aria-selected="false">Telegram</button>
            </li>
        </ul>
        <div class="tab-content w-100">
            <div class="tab-pane fade show active" id="server" role="tabpanel" aria-labelledby="server-tab">
                <form id="serverSettings_form" method="post" asp-action="">
                    @await Html.PartialAsync("_Server")
                </form>
            </div>

            <div class="tab-pane fade" id="monitoring" role="tabpanel" aria-labelledby="monitoring-tab">
                <form id="selfMonitoringSettings_form" method="post" asp-action="">
                    @await Html.PartialAsync("_SelfMonitoring")
                </form>
            </div>

            <div class="tab-pane fade" id="telegram" role="tabpanel" aria-labelledby="telegram-tab">
                <form id="telegramSettings_form" asp-action="">
                    @await Html.PartialAsync("_Telegram")
                </form>
            </div>
        </div>

        <div class="col-xxl">
            <table class="table table-striped">
                <thead>
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">Parameter name</th>
                    <th scope="col">Parameter value</th>
                    <th scope="col">Is Default</th>
                    <th scope="col">Action</th>
                </tr>
                </thead>
                <tbody>
                @{
                    var i = 0;
                }
                @foreach (var (propertyName, item) in Model)
                {
                    <form method="post">
                        <tr>
                            <th scope="row">@i</th>
                            <td>
                                <label class="config-name">@item.Name</label>
                                <a tabindex="0" data-bs-toggle="popover" data-bs-trigger="focus"  title="Description" data-bs-content="@item.Description" data-bs-html="true">
                                    <i class="fas fa-question-circle"></i>
                                </a>
                            </td>

                            <td>
                                <div style="display: flex">
                                    <input type="text" class="form-control mw-25" value="@item.Value" id="value_@propertyName">
                                </div>
                            </td>
                            <td>
                                <label class="default-text-field">@item.IsDefault</label>
                            </td>

                            <td>
                                @if (!item.IsDefault)
                                {
                                    <button id="reset_@propertyName" type="button" class="btn btn-secondary ms-1"data-bs-toggle="tooltip" title="reset value to default">
                                        <i class="fas fa-undo-alt"></i>
                                    </button>
                                }

                                <button disabled id="ok_@propertyName" type="button" class="btn btn-secondary ms-1"data-bs-toggle="tooltip" title="ok">
                                    <i class="fas fa-check"></i>
                                </button>

                                <button disabled id="cancel_@propertyName" type="button"class="btn btn-secondary ms-1" data-bs-toggle="tooltip" title="revert changes">
                                    <i class="fas fa-times"></i>
                                </button>
                            </td>
                        </tr>
                    </form>
                    i++;
                }
                </tbody>
            </table>
        </div>
    </div>
</div>


<script>
    //Description popovers
    $(document).ready(function() {
        var popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'));
        var popoverList = popoverTriggerList.map(function(popoverTriggerEl) {
            return new bootstrap.Popover(popoverTriggerEl);
        });
    });

    function createData(name, value) {
        return {
            "PropertyName": name,
            "Value": value
        }
    }

    $('[id^=cancel_]').on("click", function() {
        document.location.reload();
    });

    $('[id^=value_]').on("input", function() {
        name = this.id.substring("value_".length);

        $('#ok_' + name).prop('disabled', false);
        $('#cancel_' + name).prop('disabled', false);
    });

    $('[id^=ok_]').on("click", function() {
        name = this.id.substring("ok_".length);

        let value = $('#value_' + name).val();
        let data = createData(name, value);

        $.ajax({
            type: 'POST',
            url: saveAction,
            data: JSON.stringify(data),
            contentType: 'application/json',
            cache: false,
            async: true
        }).done(function(result) {
            document.location.reload();
        });
    });

    $('[id^=reset_]').on("click", function() {
        name = this.id.substring("reset_".length);

        $.ajax({
            type: 'POST',
            url: setToDefaultAction + "?Name=" + name,
            cache: false,
            async: true,
            success: function() {
                document.location.reload();
            }
        });
    });
</script>