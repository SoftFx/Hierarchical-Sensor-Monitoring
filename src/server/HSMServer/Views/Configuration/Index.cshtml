@using HSMServer.Constants
@using HSMServer.Controllers
@using HSMServer.HtmlHelpers
@using HSMServer.Model.ViewModel
@model List<ConfigurationObjectViewModel>

@{
    ViewData["Title"] = "Configuration";
}

<script>
    var setToDefaultAction = "@Html.Raw(Url.Action(nameof(ConfigurationController.SetToDefault), ViewConstants.ConfigurationController))";
    var saveAction = "@Html.Raw(Url.Action(nameof(ConfigurationController.SaveConfigObject), ViewConstants.ConfigurationController))";
</script>

<style>
    .default-text-field {
        font-weight: normal;
        color: grey;
        font-size: inherit;
        margin-left: 1vh;
    }

    .config-name {
        margin-right: 1vh;
    }
</style>

<div class="container">
    <div class="row justify-content-center">

        <div class="m-10">
            <div class="row justify-content-start">
                <div class="col-auto">
                    <h5 class="my-3 ms-5">Configuration parameters</h5>
                </div>
            </div>
        </div>

        <div class="col-xxl">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th scope="col">#</th>
                        <th scope="col">Parameter name</th>
                        <th scope="col">Parameter value</th>
                        <th scope="col">Is Default</th>
                        <th scope="col">Action</th>
                    </tr>
                </thead>
                <tbody>
                    @for (int i = 0; i < Model.Count; i++)
                    {
                        <tr>
                            <th scope="row">@i</th>
                            <td>
                                <label class="config-name">@Model[i].Name</label>
                                <a tabindex="0" data-bs-toggle="popover" data-bs-trigger="focus"
                               title="Description" data-bs-content="@Model[i].Description">
                                    <i class="fas fa-question-circle"></i>
                                </a>
                            </td>

                            <td>
                                <div style="display: flex">
                                    <input type="text" class="form-control mw-25" value="@Model[i].Value"
                                       id="value_@Model[i].Name">
                                </div>
                            </td>
                            <td>
                                <label class="default-text-field">@Model[i].IsDefault</label>
                            </td>

                            <td>
                                @if (!Model[i].IsDefault)
                                {
                                    <button id="reset_@Model[i].Name" type="button" class="btn btn-secondary ms-1"
                                    data-bs-toggle="tooltip" title="reset value to default">
                                        <i class="fas fa-undo-alt"></i>
                                    </button>
                                }

                                <button disabled id="ok_@Model[i].Name" type="button" class="btn btn-secondary ms-1"
                                    data-bs-toggle="tooltip" title="ok">
                                    <i class="fas fa-check"></i>
                                </button>

                                <button disabled id="cancel_@Model[i].Name" type="button"
                                    class="btn btn-secondary ms-1" data-bs-toggle="tooltip" title="revert changes">
                                    <i class="fas fa-times"></i>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>


<script>
    //Description popovers
    $(document).ready(function() {
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        var tooltipList = tooltipTriggerList.map(function(tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl);
        });

        var popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'));
        var popoverList = popoverTriggerList.map(function(popoverTriggerEl) {
            return new bootstrap.Popover(popoverTriggerEl);
        });
    });

    function createData(name, value, isDefault) {
        return {
            "Name": name,
            "Value": value,
            "IsDefault": isDefault
        }
    }

    $('[id^=cancel_]').on("click", function() {
        document.location.reload();
    });

    $('[id^=value_]').on("input", function() {
        name = this.id.substring("value_".length);

        $('#ok_' + name).prop('disabled', false);
        $('#cancel_' + name).prop('disabled', false);
    });

    $('[id^=ok_]').on("click", function() {
        name = this.id.substring("ok_".length);

        console.log(name);
        let value = $('#value_' + name).val();
        let data = createData(name, value, false);

        $.ajax({
            type: 'POST',
            url: saveAction,
            data: JSON.stringify(data),
            contentType: 'application/json',
            cache: false,
            async: true
        }).done(function(result) {
            document.location.reload();
        });
    });

    $('[id^=reset_]').on("click", function() {
        name = this.id.substring("reset_".length);

        $.ajax({
            type: 'GET',
            url: setToDefaultAction + "?Name=" + name,
            cache: false,
            async: true,
            success: function() {
                document.location.reload();
            }
        });
    });
</script>